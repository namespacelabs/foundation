// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package sentry

import (
	"context"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/go/grpc/interceptors"
	"namespacelabs.dev/foundation/std/go/http/middleware"
	"namespacelabs.dev/foundation/std/secrets"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	Dsn          *secrets.Value
	Interceptors interceptors.Registration
	Middleware   middleware.Middleware
	ServerInfo   *core.ServerInfo
}

var (
	Package__efmlf2 = &core.Package{
		PackageName: "namespacelabs.dev/foundation/universe/monitoring/sentry",
	}

	Provider__efmlf2 = core.Provider{
		Package:     Package__efmlf2,
		Instantiate: makeDeps__efmlf2,
	}

	Initializers__efmlf2 = []*core.Initializer{
		{
			Package: Package__efmlf2,
			Do: func(ctx context.Context, di core.Dependencies) error {
				return di.Instantiate(ctx, Provider__efmlf2, func(ctx context.Context, v interface{}) error {
					return Prepare(ctx, v.(ExtensionDeps))
				})
			},
		},
	}
)

func makeDeps__efmlf2(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	// name: "sentry-dsn"
	if deps.Dsn, err = secrets.ProvideSecret(ctx, core.MustUnwrapProto("CgpzZW50cnktZHNu", &secrets.Secret{}).(*secrets.Secret)); err != nil {
		return nil, err
	}

	if deps.Interceptors, err = interceptors.ProvideInterceptorRegistration(ctx, nil); err != nil {
		return nil, err
	}

	if deps.Middleware, err = middleware.ProvideMiddleware(ctx, nil); err != nil {
		return nil, err
	}

	if deps.ServerInfo, err = core.ProvideServerInfo(ctx, nil); err != nil {
		return nil, err
	}

	return deps, nil
}
