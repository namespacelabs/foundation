// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `ns generate`.

package opaque

import (
	"context"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/universe/db/postgres"
	"namespacelabs.dev/foundation/universe/db/postgres/opaque/creds"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	Wire postgres.WireDatabase
}

// Scoped dependencies that are instantiated for each call to ProvideDatabase.
type DatabaseDeps struct {
	Creds *creds.Creds
}

type _checkProvideDatabase func(context.Context, *Database, ExtensionDeps, DatabaseDeps) (*postgres.DB, error)

var _ _checkProvideDatabase = ProvideDatabase

var (
	Package__pj9age = &core.Package{
		PackageName: "namespacelabs.dev/foundation/universe/db/postgres/opaque",
	}

	Provider__pj9age = core.Provider{
		Package:     Package__pj9age,
		Instantiate: makeDeps__pj9age,
	}
	Provider__pj9age__Database = core.Provider{
		Package:     Package__pj9age,
		Typename:    "Database",
		Instantiate: makeDeps__pj9age__Database,
	}
)

func makeDeps__pj9age(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	if err := di.Instantiate(ctx, postgres.Provider__sfr1nt, func(ctx context.Context, v interface{}) (err error) {
		if deps.Wire, err = postgres.ProvideWireDatabase(ctx, nil, v.(postgres.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	return deps, nil
}

func makeDeps__pj9age__Database(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps DatabaseDeps

	if err := di.Instantiate(ctx, creds.Provider__n7tan5__Creds, func(ctx context.Context, scoped interface{}) (err error) {

		if deps.Creds, err = creds.ProvideCreds(ctx, nil, scoped.(creds.CredsDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	return deps, nil
}
