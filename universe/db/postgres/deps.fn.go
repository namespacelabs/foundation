// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package postgres

import (
	"context"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/monitoring/tracing"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	OpenTelemetry  tracing.DeferredTracerProvider
	ReadinessCheck core.Check
}

type _checkProvideWireDatabase func(context.Context, *WireDatabaseArgs, ExtensionDeps) (WireDatabase, error)

var _ _checkProvideWireDatabase = ProvideWireDatabase

var (
	Package__sfr1nt = &core.Package{
		PackageName: "namespacelabs.dev/foundation/universe/db/postgres",
	}

	Provider__sfr1nt = core.Provider{
		Package:     Package__sfr1nt,
		Instantiate: makeDeps__sfr1nt,
	}
)

func makeDeps__sfr1nt(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	if err := di.Instantiate(ctx, tracing.Provider__70o2mm, func(ctx context.Context, v interface{}) (err error) {
		if deps.OpenTelemetry, err = tracing.ProvideTracerProvider(ctx, nil, v.(tracing.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	if deps.ReadinessCheck, err = core.ProvideReadinessCheck(ctx, nil); err != nil {
		return nil, err
	}

	return deps, nil
}
