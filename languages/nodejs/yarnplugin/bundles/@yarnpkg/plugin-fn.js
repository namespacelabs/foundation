/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-fn",
factory: function (require) {
var plugin=(()=>{var M=Object.create,p=Object.defineProperty,N=Object.defineProperties,E=Object.getOwnPropertyDescriptor,A=Object.getOwnPropertyDescriptors,C=Object.getOwnPropertyNames,g=Object.getOwnPropertySymbols,T=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty,_=Object.prototype.propertyIsEnumerable;var L=(r,e,t)=>e in r?p(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,P=(r,e)=>{for(var t in e||(e={}))O.call(e,t)&&L(r,t,e[t]);if(g)for(var t of g(e))_.call(e,t)&&L(r,t,e[t]);return r},F=(r,e)=>N(r,A(e)),x=r=>p(r,"__esModule",{value:!0});var l=r=>{if(typeof require!="undefined")return require(r);throw new Error('Dynamic require of "'+r+'" is not supported')};var S=(r,e)=>{for(var t in e)p(r,t,{get:e[t],enumerable:!0})},$=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of C(e))!O.call(r,o)&&o!=="default"&&p(r,o,{get:()=>e[o],enumerable:!(t=E(e,o))||t.enumerable});return r},f=r=>$(x(p(r!=null?M(T(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var v=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var d=(r,e,t)=>(v(r,e,"read from private field"),t?t.call(r):e.get(r)),R=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)},k=(r,e,t,o)=>(v(r,e,"write to private field"),o?o.call(r,t):e.set(r,t),t);var U={};S(U,{default:()=>K});var y=f(l("@yarnpkg/core")),a=f(l("@yarnpkg/fslib")),b=f(l("fs"));var i="fn:",h="FN_YARN_LOCK_FILENAME";var c,u=class{constructor(){R(this,c,void 0);let e=process.env[h];if(!e)throw new Error(`Lock file can't be found: ${h} is not set.`);let t=(0,b.readFileSync)(e,"utf8"),o=JSON.parse(t);k(this,c,o.modules||{})}supports(e){return e.reference.startsWith(i)}getLocalPath(e){let{selector:t}=y.structUtils.parseRange(e.reference);if(!t)throw new Error(`locator.reference can't be parsed: ${e.reference}`);for(let[o,s]of Object.entries(d(this,c)))if(t.startsWith(o)){let D=t.slice(o.length);return a.ppath.join(a.ppath.resolve(process.cwd(),s.path),D)}throw new Error(`Package "${t}" couldn't be resolved. Known modules:
${JSON.stringify(d(this,c),void 0,2)}`)}async fetch(e){let t=this.getLocalPath(e);return{packageFs:new a.CwdFS(t),prefixPath:a.PortablePath.dot,localPath:t}}};c=new WeakMap;var n=f(l("@yarnpkg/core")),w=f(l("@yarnpkg/fslib"));var m=class{supportsDescriptor(e,t){return e.range.startsWith(i)}supportsLocator(e,t){return e.reference.startsWith(i)}shouldPersistResolution(e,t){return!1}bindDescriptor(e,t,o){return e}getResolutionDependencies(e,t){return[]}async getCandidates(e,t,o){let s=e.range.slice(i.length);return[n.structUtils.makeLocator(e,`${i}${w.npath.toPortablePath(s)}`)]}async getSatisfying(e,t,o){return null}async resolve(e,t){if(!t.fetchOptions)throw new Error("Assertion failed: This resolver cannot be used unless a fetcher is configured");let o=await t.fetchOptions.fetcher.fetch(e,t.fetchOptions),s=await n.miscUtils.releaseAfterUseAsync(async()=>await n.Manifest.find(o.prefixPath,{baseFs:o.packageFs}),o.releaseFs);return F(P({},e),{version:s.version||"0.0.0",languageName:s.languageName||t.project.configuration.get("defaultLanguageName"),linkType:n.LinkType.SOFT,conditions:s.getConditions(),dependencies:s.dependencies,peerDependencies:s.peerDependencies,dependenciesMeta:s.dependenciesMeta,peerDependenciesMeta:s.peerDependenciesMeta,bin:s.bin})}};var I={hooks:{afterAllInstalled:()=>{console.log("Foundation plugin installed")}},fetchers:[u],resolvers:[m]},K=I;return U;})();
return plugin;
}
};
