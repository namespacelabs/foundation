/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-fn",
factory: function (require) {
var plugin=(()=>{var y=Object.create,a=Object.defineProperty,P=Object.defineProperties,D=Object.getOwnPropertyDescriptor,R=Object.getOwnPropertyDescriptors,M=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,C=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable;var O=(r,e,t)=>e in r?a(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,c=(r,e)=>{for(var t in e||(e={}))g.call(e,t)&&O(r,t,e[t]);if(d)for(var t of d(e))b.call(e,t)&&O(r,t,e[t]);return r},F=(r,e)=>P(r,R(e)),w=r=>a(r,"__esModule",{value:!0});var p=r=>{if(typeof require!="undefined")return require(r);throw new Error('Dynamic require of "'+r+'" is not supported')};var A=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},x=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of M(e))!g.call(r,n)&&n!=="default"&&a(r,n,{get:()=>e[n],enumerable:!(t=D(e,n))||t.enumerable});return r},l=r=>x(w(a(r!=null?y(C(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var U={};A(U,{default:()=>T});var h=l(p("@yarnpkg/core")),f=l(p("@yarnpkg/fslib")),v=l(p("path"));var i="fn:";var u=class{supports(e,t){return e.reference.startsWith(i)}getLocalPath(e,t){let n=e.reference.replace(i,""),s=process.env.FN_MODULE_CACHE;if(!s)throw new Error('Foundation Yarn plugin: $FN_MODULE_CACHE is not defined. Please avoid running Yarn manually, use "fn tidy" instead.');return v.join(s,n)}async fetch(e,t){let n=t.checksums.get(e.locatorHash)||null,[s,L,k]=await t.cache.fetchPackageFromCache(e,n,c({onHit:()=>t.report.reportCacheHit(e),onMiss:()=>t.report.reportCacheMiss(e,`${h.structUtils.prettyLocator(t.project.configuration,e)} can't be found in the cache and will be fetched from the disk`),loader:()=>this.fetchFromDisk(e,t),skipIntegrityCheck:t.skipIntegrityCheck},t.cacheOptions));return{packageFs:s,releaseFs:L,prefixPath:"",localPath:this.getLocalPath(e,t),checksum:k}}async fetchFromDisk(e,t){return h.tgzUtils.makeArchiveFromDirectory(this.getLocalPath(e,t),{baseFs:new f.CwdFS(f.PortablePath.root),compressionLevel:t.project.configuration.get("compressionLevel")})}};var o=l(p("@yarnpkg/core"));var m=class{supportsDescriptor(e,t){return e.range.startsWith(i)}supportsLocator(e,t){return e.reference.startsWith(i)}shouldPersistResolution(e,t){return!1}bindDescriptor(e,t,n){return e}getResolutionDependencies(e,t){return[]}async getCandidates(e,t,n){if(!n.fetchOptions)throw new Error("Assertion failed: This resolver cannot be used unless a fetcher is configured");return[o.structUtils.makeLocator(e,e.range)]}async getSatisfying(e,t,n){return null}async resolve(e,t){if(!t.fetchOptions)throw new Error("Assertion failed: This resolver cannot be used unless a fetcher is configured");let n=await t.fetchOptions.fetcher.fetch(e,t.fetchOptions),s=await o.miscUtils.releaseAfterUseAsync(async()=>await o.Manifest.find(n.prefixPath,{baseFs:n.packageFs}),n.releaseFs);return F(c({},e),{version:s.version||"0.0.0",languageName:s.languageName||t.project.configuration.get("defaultLanguageName"),linkType:o.LinkType.HARD,conditions:s.getConditions(),dependencies:s.dependencies,peerDependencies:s.peerDependencies,dependenciesMeta:s.dependenciesMeta,peerDependenciesMeta:s.peerDependenciesMeta,bin:s.bin})}};var E={hooks:{afterAllInstalled:()=>{console.log("Foundation plugin installed")}},fetchers:[u],resolvers:[m]},T=E;return U;})();
return plugin;
}
};
