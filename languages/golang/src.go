// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

package golang

import (
	"bytes"
	"context"
	"fmt"
	"go/format"
	"io"
	"path/filepath"
	"text/template"

	"namespacelabs.dev/foundation/internal/console"
	"namespacelabs.dev/foundation/internal/fnerrors"
	"namespacelabs.dev/foundation/internal/fnfs"
	"namespacelabs.dev/foundation/internal/gosupport"
)

func generateGoSource(ctx context.Context, fsfs fnfs.ReadWriteFS, filePath string, imports *gosupport.GoImports, t *template.Template, data interface{}) error {
	return fnfs.WriteWorkspaceFile(ctx, console.Stdout(ctx), fsfs, filePath, func(w io.Writer) error {
		var body bytes.Buffer

		if err := t.Execute(&body, data); err != nil {
			return fnerrors.InternalError("failed to apply template: %w", err)
		}

		var src bytes.Buffer

		fmt.Fprintln(&src, "// This file was automatically generated by Foundation.")
		fmt.Fprintln(&src, "// DO NOT EDIT. To update, re-run `fn generate`.")

		if imports != nil {
			fmt.Fprintf(&src, "\npackage %s\n\n", filepath.Base(imports.PkgName))
			if imports := imports.ImportMap(); len(imports) > 0 {
				fmt.Fprintf(&src, "import (\n")
				for _, imp := range imports {
					fmt.Fprintf(&src, "%s %q\n", imp.Rename, imp.TypeURL)
				}
				fmt.Fprintf(&src, ")\n\n")
			}
		}

		if _, err := body.WriteTo(&src); err != nil {
			return err
		}

		formatted, err := format.Source(src.Bytes())
		if err != nil {
			fmt.Fprintln(console.Debug(ctx), "The input sources were:")
			fmt.Fprintln(console.Debug(ctx), src.String())

			return fnerrors.InternalError("failed to format generated Go file %s\nwith code:\n%s\nerr: %w", filePath, src.String(), err)
		}

		_, err = w.Write(formatted)
		return err
	})
}
