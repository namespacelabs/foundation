// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package foundation.schema;

option go_package = "namespacelabs.dev/foundation/schema";

import "google/protobuf/any.proto";
import "schema/package.proto";

// For servers or tests.
message Integration {
    // Contains the integration-specific configuration, see below.
    google.protobuf.Any data = 1;
}

message DockerfileIntegration {
    // The Dockerfile to use.
    string src = 1;
}

message ShellScriptIntegration {
    string entrypoint = 1;

    // Additional packages to install in the base image. By default, bash and curl are installed.
    repeated string required_packages = 2;
}

message GoIntegration {
    string pkg = 1;
}

// Shared between "integration" and "imageFrom" for now.
message NodejsBuild {
    reserved 3, 4;

    // Path to `package.json`, relative to the Namespace package. Default is "."
    string pkg = 1;

    // Detected Node.js package manager.
    NodePkgMgr node_pkg_mgr = 2;

    // For Web builds. It is here because building the image for Web is done by the Node.js builder.
    // This is a temporary internal API. Will be replaced with a nodejs-independent way in the future.
    repeated Backend internal_do_not_use_backend = 5;

    // Entry point for the container.
    string run_script = 6;

    // Configuration for prod/test builds.
    Prod prod = 7;

    enum NodePkgMgr {
        PKG_MGR_UNKNOWN = 0;
        NPM             = 1;
        YARN            = 2;
        YARN3           = 4;
        PNPM            = 3;
    }

    message Prod {
        // If set, this script from package.json is executed.
        string build_script = 1;

        // Relative path within the build image to copy to the prod image (to the same path).
        string build_out_dir = 2;

        // If true, the "install" package manager command is executed in the prod image, too.
        // Dev dependencies are not installed in this case.
        bool install_deps = 3;
    }

    message Backend {
        // The name of the backend for this particular Web build, e.g. "api".
        string name = 1;

        PackageRef service = 2;
    }
}

message WebIntegration {
    NodejsBuild nodejs = 1;

    // The service that corresponds to this web integration.
    // Needed to get the port for prod serving.
    string service = 3;
}

message WebBuild {
    NodejsBuild nodejs = 1;

    // Passed to nginx
    int32 port = 3;
}