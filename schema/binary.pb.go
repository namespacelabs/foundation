// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: schema/binary.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A "binary" represents a compiled image. It's output is an OCI image, but the
// difference to an OCI image is that a binary knows how to build itself (i.e.
// the resulting image is reproducible).
type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package name (computed).
	PackageName string                 `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config      *BinaryConfig          `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"` // Run instructions.
	BuildPlan   *LayeredImageBuildPlan `protobuf:"bytes,8,opt,name=build_plan,json=buildPlan,proto3" json:"build_plan,omitempty"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{0}
}

func (x *Binary) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Binary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Binary) GetConfig() *BinaryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Binary) GetBuildPlan() *LayeredImageBuildPlan {
	if x != nil {
		return x.BuildPlan
	}
	return nil
}

// Next ID: 9
type ImageBuildPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoPackage     string                      `protobuf:"bytes,1,opt,name=go_package,json=goPackage,proto3" json:"go_package,omitempty"`             // Use go binary builder.
	GoBuild       *ImageBuildPlan_GoBuild     `protobuf:"bytes,7,opt,name=go_build,json=goBuild,proto3" json:"go_build,omitempty"`                   // Use go binary builder.
	Dockerfile    string                      `protobuf:"bytes,2,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`                            // Use Dockerfile builder.
	WebBuild      string                      `protobuf:"bytes,3,opt,name=web_build,json=webBuild,proto3" json:"web_build,omitempty"`                // Use Web build (temporary).
	LlbPlan       *ImageBuildPlan_LLBPlan     `protobuf:"bytes,4,opt,name=llb_plan,json=llbPlan,proto3" json:"llb_plan,omitempty"`                   // Build  binary which itself produces LLB.
	NixFlake      string                      `protobuf:"bytes,5,opt,name=nix_flake,json=nixFlake,proto3" json:"nix_flake,omitempty"`                // Build a docker image from a nix flake.
	SnapshotFiles []string                    `protobuf:"bytes,6,rep,name=snapshot_files,json=snapshotFiles,proto3" json:"snapshot_files,omitempty"` // Add all referenced files, and directories, recursively visiting their children.
	ImageId       string                      `protobuf:"bytes,8,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`                   // Use an existing image.
	NodejsBuild   *ImageBuildPlan_NodejsBuild `protobuf:"bytes,9,opt,name=nodejs_build,json=nodejsBuild,proto3" json:"nodejs_build,omitempty"`
	Binary        *PackageRef                 `protobuf:"bytes,10,opt,name=binary,proto3" json:"binary,omitempty"` // Add another binary as a layer.
}

func (x *ImageBuildPlan) Reset() {
	*x = ImageBuildPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildPlan) ProtoMessage() {}

func (x *ImageBuildPlan) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildPlan.ProtoReflect.Descriptor instead.
func (*ImageBuildPlan) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{1}
}

func (x *ImageBuildPlan) GetGoPackage() string {
	if x != nil {
		return x.GoPackage
	}
	return ""
}

func (x *ImageBuildPlan) GetGoBuild() *ImageBuildPlan_GoBuild {
	if x != nil {
		return x.GoBuild
	}
	return nil
}

func (x *ImageBuildPlan) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *ImageBuildPlan) GetWebBuild() string {
	if x != nil {
		return x.WebBuild
	}
	return ""
}

func (x *ImageBuildPlan) GetLlbPlan() *ImageBuildPlan_LLBPlan {
	if x != nil {
		return x.LlbPlan
	}
	return nil
}

func (x *ImageBuildPlan) GetNixFlake() string {
	if x != nil {
		return x.NixFlake
	}
	return ""
}

func (x *ImageBuildPlan) GetSnapshotFiles() []string {
	if x != nil {
		return x.SnapshotFiles
	}
	return nil
}

func (x *ImageBuildPlan) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageBuildPlan) GetNodejsBuild() *ImageBuildPlan_NodejsBuild {
	if x != nil {
		return x.NodejsBuild
	}
	return nil
}

func (x *ImageBuildPlan) GetBinary() *PackageRef {
	if x != nil {
		return x.Binary
	}
	return nil
}

type LayeredImageBuildPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayerBuildPlan []*ImageBuildPlan `protobuf:"bytes,1,rep,name=layer_build_plan,json=layerBuildPlan,proto3" json:"layer_build_plan,omitempty"` // Each build plan will yield N layers, in order.
}

func (x *LayeredImageBuildPlan) Reset() {
	*x = LayeredImageBuildPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayeredImageBuildPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayeredImageBuildPlan) ProtoMessage() {}

func (x *LayeredImageBuildPlan) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayeredImageBuildPlan.ProtoReflect.Descriptor instead.
func (*LayeredImageBuildPlan) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{2}
}

func (x *LayeredImageBuildPlan) GetLayerBuildPlan() []*ImageBuildPlan {
	if x != nil {
		return x.LayerBuildPlan
	}
	return nil
}

// Instructions of how to invoke the image, if it includes an invocable binary.
type BinaryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command    []string                 `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Args       []string                 `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Env        []*BinaryConfig_EnvEntry `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	WorkingDir string                   `protobuf:"bytes,4,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
}

func (x *BinaryConfig) Reset() {
	*x = BinaryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryConfig) ProtoMessage() {}

func (x *BinaryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryConfig.ProtoReflect.Descriptor instead.
func (*BinaryConfig) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{3}
}

func (x *BinaryConfig) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *BinaryConfig) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *BinaryConfig) GetEnv() []*BinaryConfig_EnvEntry {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *BinaryConfig) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type ImageBuildPlan_LLBPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputOf *Binary `protobuf:"bytes,1,opt,name=output_of,json=outputOf,proto3" json:"output_of,omitempty"`
}

func (x *ImageBuildPlan_LLBPlan) Reset() {
	*x = ImageBuildPlan_LLBPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildPlan_LLBPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildPlan_LLBPlan) ProtoMessage() {}

func (x *ImageBuildPlan_LLBPlan) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildPlan_LLBPlan.ProtoReflect.Descriptor instead.
func (*ImageBuildPlan_LLBPlan) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ImageBuildPlan_LLBPlan) GetOutputOf() *Binary {
	if x != nil {
		return x.OutputOf
	}
	return nil
}

type ImageBuildPlan_GoBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelPath    string `protobuf:"bytes,1,opt,name=rel_path,json=relPath,proto3" json:"rel_path,omitempty"`
	BinaryName string `protobuf:"bytes,2,opt,name=binary_name,json=binaryName,proto3" json:"binary_name,omitempty"`
	BinaryOnly bool   `protobuf:"varint,3,opt,name=binary_only,json=binaryOnly,proto3" json:"binary_only,omitempty"`
	// Whether to observe changes to the file system.
	IsFocus bool `protobuf:"varint,4,opt,name=is_focus,json=isFocus,proto3" json:"is_focus,omitempty"`
}

func (x *ImageBuildPlan_GoBuild) Reset() {
	*x = ImageBuildPlan_GoBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildPlan_GoBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildPlan_GoBuild) ProtoMessage() {}

func (x *ImageBuildPlan_GoBuild) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildPlan_GoBuild.ProtoReflect.Descriptor instead.
func (*ImageBuildPlan_GoBuild) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ImageBuildPlan_GoBuild) GetRelPath() string {
	if x != nil {
		return x.RelPath
	}
	return ""
}

func (x *ImageBuildPlan_GoBuild) GetBinaryName() string {
	if x != nil {
		return x.BinaryName
	}
	return ""
}

func (x *ImageBuildPlan_GoBuild) GetBinaryOnly() bool {
	if x != nil {
		return x.BinaryOnly
	}
	return false
}

func (x *ImageBuildPlan_GoBuild) GetIsFocus() bool {
	if x != nil {
		return x.IsFocus
	}
	return false
}

type ImageBuildPlan_NodejsBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelPath string `protobuf:"bytes,1,opt,name=rel_path,json=relPath,proto3" json:"rel_path,omitempty"`
	// Required.
	NodePkgMgr NodejsIntegration_NodePkgMgr `protobuf:"varint,2,opt,name=node_pkg_mgr,json=nodePkgMgr,proto3,enum=foundation.schema.NodejsIntegration_NodePkgMgr" json:"node_pkg_mgr,omitempty"`
}

func (x *ImageBuildPlan_NodejsBuild) Reset() {
	*x = ImageBuildPlan_NodejsBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageBuildPlan_NodejsBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageBuildPlan_NodejsBuild) ProtoMessage() {}

func (x *ImageBuildPlan_NodejsBuild) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageBuildPlan_NodejsBuild.ProtoReflect.Descriptor instead.
func (*ImageBuildPlan_NodejsBuild) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ImageBuildPlan_NodejsBuild) GetRelPath() string {
	if x != nil {
		return x.RelPath
	}
	return ""
}

func (x *ImageBuildPlan_NodejsBuild) GetNodePkgMgr() NodejsIntegration_NodePkgMgr {
	if x != nil {
		return x.NodePkgMgr
	}
	return NodejsIntegration_PKG_MGR_UNKNOWN
}

type BinaryConfig_EnvEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExperimentalFromSecret string `protobuf:"bytes,3,opt,name=experimental_from_secret,json=experimentalFromSecret,proto3" json:"experimental_from_secret,omitempty"` // Runtime specific.
}

func (x *BinaryConfig_EnvEntry) Reset() {
	*x = BinaryConfig_EnvEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_binary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryConfig_EnvEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryConfig_EnvEntry) ProtoMessage() {}

func (x *BinaryConfig_EnvEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_binary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryConfig_EnvEntry.ProtoReflect.Descriptor instead.
func (*BinaryConfig_EnvEntry) Descriptor() ([]byte, []int) {
	return file_schema_binary_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BinaryConfig_EnvEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BinaryConfig_EnvEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BinaryConfig_EnvEntry) GetExperimentalFromSecret() string {
	if x != nil {
		return x.ExperimentalFromSecret
	}
	return ""
}

var File_schema_binary_proto protoreflect.FileDescriptor

var file_schema_binary_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x06, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x22, 0xa4, 0x06, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x67, 0x6f, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x47, 0x6f, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x07, 0x67, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x65, 0x62, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x65, 0x62, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x6c, 0x6c, 0x62,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x4c,
	0x4c, 0x42, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x6c, 0x6c, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x78, 0x46, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x1a, 0x41, 0x0a, 0x07, 0x4c, 0x4c, 0x42, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4f, 0x66, 0x1a, 0x81, 0x01, 0x0a, 0x07, 0x47,
	0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x1a, 0x7b,
	0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x6b, 0x67, 0x5f, 0x6d, 0x67, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4d, 0x67, 0x72, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4d, 0x67, 0x72, 0x22, 0x64, 0x0a, 0x15, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x0e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x3a, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1f, 0x0a, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x1a, 0x6e, 0x0a,
	0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x25, 0x5a,
	0x23, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_binary_proto_rawDescOnce sync.Once
	file_schema_binary_proto_rawDescData = file_schema_binary_proto_rawDesc
)

func file_schema_binary_proto_rawDescGZIP() []byte {
	file_schema_binary_proto_rawDescOnce.Do(func() {
		file_schema_binary_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_binary_proto_rawDescData)
	})
	return file_schema_binary_proto_rawDescData
}

var file_schema_binary_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_schema_binary_proto_goTypes = []interface{}{
	(*Binary)(nil),                     // 0: foundation.schema.Binary
	(*ImageBuildPlan)(nil),             // 1: foundation.schema.ImageBuildPlan
	(*LayeredImageBuildPlan)(nil),      // 2: foundation.schema.LayeredImageBuildPlan
	(*BinaryConfig)(nil),               // 3: foundation.schema.BinaryConfig
	(*ImageBuildPlan_LLBPlan)(nil),     // 4: foundation.schema.ImageBuildPlan.LLBPlan
	(*ImageBuildPlan_GoBuild)(nil),     // 5: foundation.schema.ImageBuildPlan.GoBuild
	(*ImageBuildPlan_NodejsBuild)(nil), // 6: foundation.schema.ImageBuildPlan.NodejsBuild
	(*BinaryConfig_EnvEntry)(nil),      // 7: foundation.schema.BinaryConfig.EnvEntry
	(*PackageRef)(nil),                 // 8: foundation.schema.PackageRef
	(NodejsIntegration_NodePkgMgr)(0),  // 9: foundation.schema.NodejsIntegration.NodePkgMgr
}
var file_schema_binary_proto_depIdxs = []int32{
	3,  // 0: foundation.schema.Binary.config:type_name -> foundation.schema.BinaryConfig
	2,  // 1: foundation.schema.Binary.build_plan:type_name -> foundation.schema.LayeredImageBuildPlan
	5,  // 2: foundation.schema.ImageBuildPlan.go_build:type_name -> foundation.schema.ImageBuildPlan.GoBuild
	4,  // 3: foundation.schema.ImageBuildPlan.llb_plan:type_name -> foundation.schema.ImageBuildPlan.LLBPlan
	6,  // 4: foundation.schema.ImageBuildPlan.nodejs_build:type_name -> foundation.schema.ImageBuildPlan.NodejsBuild
	8,  // 5: foundation.schema.ImageBuildPlan.binary:type_name -> foundation.schema.PackageRef
	1,  // 6: foundation.schema.LayeredImageBuildPlan.layer_build_plan:type_name -> foundation.schema.ImageBuildPlan
	7,  // 7: foundation.schema.BinaryConfig.env:type_name -> foundation.schema.BinaryConfig.EnvEntry
	0,  // 8: foundation.schema.ImageBuildPlan.LLBPlan.output_of:type_name -> foundation.schema.Binary
	9,  // 9: foundation.schema.ImageBuildPlan.NodejsBuild.node_pkg_mgr:type_name -> foundation.schema.NodejsIntegration.NodePkgMgr
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_schema_binary_proto_init() }
func file_schema_binary_proto_init() {
	if File_schema_binary_proto != nil {
		return
	}
	file_schema_integration_proto_init()
	file_schema_package_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_binary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayeredImageBuildPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildPlan_LLBPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildPlan_GoBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageBuildPlan_NodejsBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_binary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryConfig_EnvEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_binary_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_binary_proto_goTypes,
		DependencyIndexes: file_schema_binary_proto_depIdxs,
		MessageInfos:      file_schema_binary_proto_msgTypes,
	}.Build()
	File_schema_binary_proto = out.File
	file_schema_binary_proto_rawDesc = nil
	file_schema_binary_proto_goTypes = nil
	file_schema_binary_proto_depIdxs = nil
}
