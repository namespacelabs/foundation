// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package foundation.schema;

option go_package = "namespacelabs.dev/foundation/schema";

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "schema/domain.proto";

// Next ID: 11
message Endpoint {
    enum Type {
        INGRESS_UNSPECIFIED = 0;  // Defaults to PRIVATE in services.
        PRIVATE             = 1;
        INTERNET_FACING     = 2;
    }

    Type type = 1;
    reserved 2;

    // The tuple (endpoint_owner, service_name) uniquely identifies an endpoint.
    string service_name   = 3;
    string endpoint_owner = 4;  // Package name.

    Port                     port             = 5;
    string                   allocated_name   = 6;
    string                   server_owner     = 7;  // Package name.
    repeated ServiceMetadata service_metadata = 8;

    string service_label = 10;

    message Port {
        string name           = 1;
        int32  container_port = 2;
    }

    reserved 9;
}

message InternalEndpoint {
    string                   server_owner     = 1;  // Package name.
    Endpoint.Port            port             = 2;
    repeated ServiceMetadata service_metadata = 3;
}

// Next ID: 10
message IngressFragment {
    string                      name               = 1;
    string                      owner              = 2;  // Server package name.
    Domain                      domain             = 3;
    Certificate                 domain_certificate = 9;
    Endpoint                    endpoint           = 6;
    repeated IngressHttpPath    http_path          = 4;
    repeated IngressGrpcService grpc_service       = 7;
    string                      manager            = 8;  // If this is a specialized ingress, it may be annotated as such. E.g. with namespacelabs.dev/foundation/std/grp/httptranscoding.

    // Accepted: HttpCors, ProxyBodySize.
    repeated google.protobuf.Any extension = 5;

    message IngressHttpPath {
        string        path    = 1;
        string        kind    = 2;
        string        owner   = 3;  // Package name.
        string        service = 4;  // Backend service.
        Endpoint.Port port    = 5;
    }

    message IngressGrpcService {
        string          grpc_service = 1;  // Fully qualified name.
        string          owner        = 2;  // Package name.
        string          service      = 3;  // Backing service.
        repeated string method       = 5;  // If not set, forward all methods.
        Endpoint.Port   port         = 4;
        bool            backend_tls  = 6;
        bool            all_services = 7;  // If set, all paths are forwarded.
    }
}

message IngressFragmentList {
    repeated IngressFragment ingress_fragment = 1;
}

message HttpCors {
    bool            enabled        = 1;
    repeated string allowed_origin = 2;
}

message ServiceMetadata {
    string              kind     = 1;
    string              protocol = 2;
    google.protobuf.Any details  = 3;
}

message HttpUrlMap {
    repeated Entry entry = 1;

    message Entry {
        string path_prefix = 1;
        string kind        = 2;
    }
}

message GrpcHttpTranscoding {
    // Includes the service proto definition, and its dependencies.
    google.protobuf.FileDescriptorSet file_descriptor_set = 1;
}

message HttpExportedService {
    string path = 1;
}
