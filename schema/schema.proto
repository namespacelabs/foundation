// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

syntax = "proto3";

package foundation.schema;

option go_package = "namespacelabs.dev/foundation/schema";

import "google/protobuf/any.proto";
import "schema/networking.proto";
import "schema/binary.proto";

// A schema file may include services and server; but initially we constraint
// files to include exclusively one. That constraint is applied at `lint` time,
// i.e. when the schema file is loaded.
message Schema {
    repeated Node   service   = 1;
    repeated Node   extension = 2;
    repeated Server server    = 3;
}

message Stack {
    repeated Entry            entry             = 1;
    repeated Endpoint         endpoint          = 2;
    repeated InternalEndpoint internal_endpoint = 3;

    message Entry {
        Server        server        = 1;
        Naming        server_naming = 3;
        repeated Node node          = 2;
    }
}

// This is temporary; without extensions protos are pretty monolithic.
// And we don't want to be in a situation where all possible integrations
// have to be known ahead of time.
// Next ID: 19
message Node {
    // The package name (computed).
    string package_name = 1;

    Kind kind = 2;

    // The computed list of dependency URLs of this service (direct and indirect).
    repeated string import = 3;

    reserved 4;

    // Name used publicly.
    string ingress_service_name = 5;

    // Singleton dependencies instantiated for this node.
    repeated Instantiate instantiate = 6;

    // A list of node needs (e.g. ports, etc).
    repeated Need need = 7;

    // Declarations of instance types this node provides.
    repeated Provides provides = 8;

    // Service nodes export services. This is embedded in the schema now but
    // may become dependencies in the future, i.e. an exported service
    // is kind of an instance of a declared gRPC service.
    repeated GrpcExportService export_service = 9;

    // If set to true, these service's GRPC services are to be exported as HTTP
    // as well. Regardless of the ingress configuration here, these endpoints
    // will be public.
    bool export_services_as_http = 17;

    // HTTP paths exported by this service.
    repeated HttpPath export_http = 16;

    // Ingress can be used to configure whether a service is visible to the
    // internet (only valid for services).
    Endpoint.Type ingress = 10;

    // Can't contain multiple initializers with the same "framework".
    // Not a map since "framework" will likely be broken down and converted to a message.
    repeated NodeInitializer initializers = 11;

    Framework service_framework = 19;

    repeated Reference reference = 13;

    // Set of dependencies specified explicitly by the user.
    repeated string user_imports = 14;

    // Framework-specific extensions.
    repeated google.protobuf.Any ext = 15;

    // Storage claims.
    repeated RequiredStorage required_storage = 18;

    enum Kind {
        KIND_UNSPECIFIED = 0;
        SERVICE          = 1;
        EXTENSION        = 2;
    }
}

message NodeInitializer {
    Framework framework = 1;
}

enum Framework {
    FRAMEWORK_UNSPECIFIED = 0;
    // TODO(@nicolasalt): rename to GO. Careful with version skew.
    GO_GRPC = 1;
    WEB     = 2;
    NODEJS  = 3;
    // Only for servers
    OPAQUE = 4;
}

message HttpPath {
    string path = 1;
    string kind = 2;
}

// XXX needs are at odds with instanced nodes; both provide means for the node to
// use data+behavior provided by another part of the system. Provides is a better
// model as it's more flexible. Needs are a necessary level right now to get core
// types instantiated (e.g. ports).
message Need {
    string cue_path = 1;

    oneof type {
        Port port = 2;
    }

    message Port {
        string name = 1;
    }
}

message Provides {
    string               name         = 1;
    TypeDef              type         = 2;
    repeated AvailableIn available_in = 3;

    message AvailableIn {
        Go     go     = 1;
        Web    web    = 2;
        NodeJs nodejs = 3;

        message Go {
            string package = 1;
            string type    = 2;
        }

        message Web {}

        message NodeJs {
            string import = 1;
            string type   = 2;
        }
    }

    // Scoped dependencies instantiated for this provided type.
    repeated Instantiate instantiate = 4;
}

message TypeDef {
    // The type made available for configuration.
    string typename = 1;
    // Paths to the protos that define the types available as a provider. Paths
    // must be relative to the package.
    repeated string source = 2;
}

message GrpcExportService {
    // Paths to the protos that defines the service. Paths must be
    // relative to the package.
    repeated string proto = 1;

    // The type of the service being exported.
    string proto_typename = 2;
}

message Reference {
    Kind   kind     = 1;
    string cue_path = 2;

    string          image        = 3;
    string          package_name = 4;
    repeated string file_path    = 5;  // Relative to the module's path.

    enum Kind {
        KIND_UNSPECIFIED = 0;
        IMAGE            = 1;  // Uses `image`.
        SERVER           = 2;  // Uses `package_name`.
        SERVICE          = 3;  // Uses `package_name`.
        PROTO_DEPS       = 4;  // Uses `file_path`.
    }
}

message Server {
    reserved 17, 19;

    // The package name (computed).
    string package_name = 1;

    // In order to decouple code location and production resources, we refer
    // to the service through it's ID; which must remain constant during the
    // life of the service.
    string id = 2;

    // A name for a person-user to read and refer to.
    string name = 3;

    // The computed list of dependency URLs of this server (direct and indirect).
    repeated string import = 4;

    // The parent repository that hosts this server's definition.
    string namespace_module = 5;

    // Framework-specific extensions.
    repeated google.protobuf.Any ext = 6;

    // All of the allocations performed in this server's dependency tree.
    repeated Allocation allocation = 7;

    Framework framework = 8;

    bool is_stateful = 20;

    Binary binary = 9;

    repeated ServiceSpec service = 10;
    repeated ServiceSpec ingress = 11;

    repeated Reference reference = 12;

    // XXX temporary.
    repeated BinaryConfig.Entry static_env = 13;

    // Set of dependencies specified explicitly by the user.
    repeated string user_imports = 14;

    // Set of URL prefixes this server declares supporting.
    repeated URLMapEntry url_map = 15;

    // A set of ports that this server exports and require no configuration.
    repeated Endpoint.Port static_port = 16;

    // Aggregated from all nodes.
    repeated RequiredStorage required_storage = 18;

    message Binary {
        string prebuilt     = 1;
        string package_name = 2;
    }

    message ServiceSpec {
        string          name     = 1;
        ServiceMetadata metadata = 2;
        Endpoint.Port   port     = 3;
        bool            internal = 4;  // This service is of no relevance for development.
    }

    message URLMapEntry {
        string path_prefix  = 1;
        string package_name = 2;
        string ingress_name = 3;
        string kind         = 4;
    }
}

// Allocations for a tree of instanced values.
message Allocation {
    repeated Instance instance = 1;

    message Instance {
        // The source of the allocation.
        string instance_owner = 1;
        // The owning package of the fields being instantiated.
        string package_name = 2;
        // An unique name within the server for this allocation path.
        string alloc_name = 3;

        repeated Instantiate instantiated = 4;

        // Allocations that happen as a result of this allocation (e.g. an instance
        // of a dependency).
        repeated Allocation downstream_allocation = 5;
    }
}

message Instantiate {
    string package_name = 3;
    string type         = 4;

    // A unique name used to refer and configure this dependency.
    string name = 1;

    google.protobuf.Any constructor = 2;
}

message Environment {
    string  name    = 1;
    string  runtime = 2;  // E.g. kubernetes
    Purpose purpose = 3;
    // Typically only set for tests. Signals that this environment is single-use and not meant to be user serviceable.
    bool ephemeral = 4;

    enum Purpose {
        PURPOSE_UNKNOWN = 0;
        DEVELOPMENT     = 1;
        TESTING         = 2;
        PRODUCTION      = 3;
    }
}

message Platform {
    // Architecture field specifies the CPU architecture, for example
    // `amd64` or `ppc64`.
    string architecture = 1;

    // OS specifies the operating system, for example `linux` or `windows`.
    string os = 2;

    string variant = 3;
}

message HttpExportedService {
    string path = 1;
}

message RequiredStorage {
    string owner         = 1;  // Package name.
    string persistent_id = 2;
    uint64 byte_count    = 3;
    string mount_path    = 4;
}

message Naming {
    string with_org                = 1;  // Allocate with the following organization.
    string domain_name             = 2;  // If set, also configures the ingress with this domain.
    string tls_managed_domain_name = 3;  // If set, both configures an ingress with this domain, and requests TLS certificate from Foundation.
}
