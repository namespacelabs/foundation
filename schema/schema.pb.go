// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: schema/schema.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Framework int32

const (
	Framework_FRAMEWORK_UNSPECIFIED Framework = 0
	Framework_GO                    Framework = 1
	Framework_WEB                   Framework = 2
	Framework_NODEJS                Framework = 3
	// Only for servers
	Framework_OPAQUE Framework = 4
)

// Enum value maps for Framework.
var (
	Framework_name = map[int32]string{
		0: "FRAMEWORK_UNSPECIFIED",
		1: "GO",
		2: "WEB",
		3: "NODEJS",
		4: "OPAQUE",
	}
	Framework_value = map[string]int32{
		"FRAMEWORK_UNSPECIFIED": 0,
		"GO":                    1,
		"WEB":                   2,
		"NODEJS":                3,
		"OPAQUE":                4,
	}
)

func (x Framework) Enum() *Framework {
	p := new(Framework)
	*p = x
	return p
}

func (x Framework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Framework) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[0].Descriptor()
}

func (Framework) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[0]
}

func (x Framework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Framework.Descriptor instead.
func (Framework) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{0}
}

type Node_Kind int32

const (
	Node_KIND_UNSPECIFIED Node_Kind = 0
	Node_SERVICE          Node_Kind = 1
	Node_EXTENSION        Node_Kind = 2
)

// Enum value maps for Node_Kind.
var (
	Node_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "SERVICE",
		2: "EXTENSION",
	}
	Node_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"SERVICE":          1,
		"EXTENSION":        2,
	}
)

func (x Node_Kind) Enum() *Node_Kind {
	p := new(Node_Kind)
	*p = x
	return p
}

func (x Node_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[1].Descriptor()
}

func (Node_Kind) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[1]
}

func (x Node_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Kind.Descriptor instead.
func (Node_Kind) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2, 0}
}

type Reference_Kind int32

const (
	Reference_KIND_UNSPECIFIED Reference_Kind = 0
	Reference_IMAGE            Reference_Kind = 1 // Uses `image`.
	Reference_SERVER           Reference_Kind = 2 // Uses `package_name`.
	Reference_SERVICE          Reference_Kind = 3 // Uses `package_name`.
	Reference_PROTO_DEPS       Reference_Kind = 4 // Uses `file_path`.
)

// Enum value maps for Reference_Kind.
var (
	Reference_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "IMAGE",
		2: "SERVER",
		3: "SERVICE",
		4: "PROTO_DEPS",
	}
	Reference_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"IMAGE":            1,
		"SERVER":           2,
		"SERVICE":          3,
		"PROTO_DEPS":       4,
	}
)

func (x Reference_Kind) Enum() *Reference_Kind {
	p := new(Reference_Kind)
	*p = x
	return p
}

func (x Reference_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reference_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[2].Descriptor()
}

func (Reference_Kind) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[2]
}

func (x Reference_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reference_Kind.Descriptor instead.
func (Reference_Kind) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{9, 0}
}

type Environment_Purpose int32

const (
	Environment_PURPOSE_UNKNOWN Environment_Purpose = 0
	Environment_DEVELOPMENT     Environment_Purpose = 1
	Environment_TESTING         Environment_Purpose = 2
	Environment_PRODUCTION      Environment_Purpose = 3
)

// Enum value maps for Environment_Purpose.
var (
	Environment_Purpose_name = map[int32]string{
		0: "PURPOSE_UNKNOWN",
		1: "DEVELOPMENT",
		2: "TESTING",
		3: "PRODUCTION",
	}
	Environment_Purpose_value = map[string]int32{
		"PURPOSE_UNKNOWN": 0,
		"DEVELOPMENT":     1,
		"TESTING":         2,
		"PRODUCTION":      3,
	}
)

func (x Environment_Purpose) Enum() *Environment_Purpose {
	p := new(Environment_Purpose)
	*p = x
	return p
}

func (x Environment_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_schema_proto_enumTypes[3].Descriptor()
}

func (Environment_Purpose) Type() protoreflect.EnumType {
	return &file_schema_schema_proto_enumTypes[3]
}

func (x Environment_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Environment_Purpose.Descriptor instead.
func (Environment_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{13, 0}
}

// A schema file may include services and server; but initially we constraint
// files to include exclusively one. That constraint is applied at `lint` time,
// i.e. when the schema file is loaded.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   []*Node   `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"`
	Extension []*Node   `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Server    []*Server `protobuf:"bytes,3,rep,name=server,proto3" json:"server,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetService() []*Node {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Schema) GetExtension() []*Node {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Schema) GetServer() []*Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Stack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry            []*Stack_Entry      `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
	Endpoint         []*Endpoint         `protobuf:"bytes,2,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	InternalEndpoint []*InternalEndpoint `protobuf:"bytes,3,rep,name=internal_endpoint,json=internalEndpoint,proto3" json:"internal_endpoint,omitempty"`
}

func (x *Stack) Reset() {
	*x = Stack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack) ProtoMessage() {}

func (x *Stack) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack.ProtoReflect.Descriptor instead.
func (*Stack) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Stack) GetEntry() []*Stack_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Stack) GetEndpoint() []*Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Stack) GetInternalEndpoint() []*InternalEndpoint {
	if x != nil {
		return x.InternalEndpoint
	}
	return nil
}

// This is temporary; without extensions protos are pretty monolithic.
// And we don't want to be in a situation where all possible integrations
// have to be known ahead of time.
// Next ID: 22
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package name (computed).
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// The module name (computed).
	ModuleName string    `protobuf:"bytes,20,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	Kind       Node_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=foundation.schema.Node_Kind" json:"kind,omitempty"`
	// The computed list of dependency URLs of this service (direct and indirect).
	Import []string `protobuf:"bytes,3,rep,name=import,proto3" json:"import,omitempty"`
	// Name used publicly.
	IngressServiceName string `protobuf:"bytes,5,opt,name=ingress_service_name,json=ingressServiceName,proto3" json:"ingress_service_name,omitempty"`
	// Singleton dependencies instantiated for this node.
	Instantiate []*Instantiate `protobuf:"bytes,6,rep,name=instantiate,proto3" json:"instantiate,omitempty"`
	// A list of node needs (e.g. ports, etc).
	Need []*Need `protobuf:"bytes,7,rep,name=need,proto3" json:"need,omitempty"`
	// Declarations of instance types this node provides.
	Provides []*Provides `protobuf:"bytes,8,rep,name=provides,proto3" json:"provides,omitempty"`
	// Service nodes export services. This is embedded in the schema now but
	// may become dependencies in the future, i.e. an exported service
	// is kind of an instance of a declared gRPC service.
	ExportService []*GrpcExportService `protobuf:"bytes,9,rep,name=export_service,json=exportService,proto3" json:"export_service,omitempty"`
	// If set to true, these service's GRPC services are to be exported as HTTP
	// as well. Regardless of the ingress configuration here, these endpoints
	// will be public.
	ExportServicesAsHttp bool `protobuf:"varint,17,opt,name=export_services_as_http,json=exportServicesAsHttp,proto3" json:"export_services_as_http,omitempty"`
	// HTTP paths exported by this service.
	ExportHttp []*HttpPath `protobuf:"bytes,16,rep,name=export_http,json=exportHttp,proto3" json:"export_http,omitempty"`
	// Ingress can be used to configure whether a service is visible to the
	// internet (only valid for services).
	Ingress Endpoint_Type `protobuf:"varint,10,opt,name=ingress,proto3,enum=foundation.schema.Endpoint_Type" json:"ingress,omitempty"`
	// Can't contain multiple initializers with the same "framework".
	// Not a map since "framework" will likely be broken down and converted to a message.
	Initializers     []*NodeInitializer `protobuf:"bytes,11,rep,name=initializers,proto3" json:"initializers,omitempty"`
	ServiceFramework Framework          `protobuf:"varint,19,opt,name=service_framework,json=serviceFramework,proto3,enum=foundation.schema.Framework" json:"service_framework,omitempty"`
	Reference        []*Reference       `protobuf:"bytes,13,rep,name=reference,proto3" json:"reference,omitempty"`
	// Set of dependencies specified explicitly by the user.
	UserImports []string `protobuf:"bytes,14,rep,name=user_imports,json=userImports,proto3" json:"user_imports,omitempty"`
	// Framework-specific extensions.
	Ext []*anypb.Any `protobuf:"bytes,15,rep,name=ext,proto3" json:"ext,omitempty"`
	// Storage claims.
	RequiredStorage []*RequiredStorage `protobuf:"bytes,18,rep,name=required_storage,json=requiredStorage,proto3" json:"required_storage,omitempty"`
	// Environment requirements determine whether a particular node is compatible with a particular environment.
	EnvironmentRequirement *Node_EnvironmentRequirement `protobuf:"bytes,21,opt,name=environment_requirement,json=environmentRequirement,proto3" json:"environment_requirement,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Node) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Node) GetKind() Node_Kind {
	if x != nil {
		return x.Kind
	}
	return Node_KIND_UNSPECIFIED
}

func (x *Node) GetImport() []string {
	if x != nil {
		return x.Import
	}
	return nil
}

func (x *Node) GetIngressServiceName() string {
	if x != nil {
		return x.IngressServiceName
	}
	return ""
}

func (x *Node) GetInstantiate() []*Instantiate {
	if x != nil {
		return x.Instantiate
	}
	return nil
}

func (x *Node) GetNeed() []*Need {
	if x != nil {
		return x.Need
	}
	return nil
}

func (x *Node) GetProvides() []*Provides {
	if x != nil {
		return x.Provides
	}
	return nil
}

func (x *Node) GetExportService() []*GrpcExportService {
	if x != nil {
		return x.ExportService
	}
	return nil
}

func (x *Node) GetExportServicesAsHttp() bool {
	if x != nil {
		return x.ExportServicesAsHttp
	}
	return false
}

func (x *Node) GetExportHttp() []*HttpPath {
	if x != nil {
		return x.ExportHttp
	}
	return nil
}

func (x *Node) GetIngress() Endpoint_Type {
	if x != nil {
		return x.Ingress
	}
	return Endpoint_INGRESS_UNSPECIFIED
}

func (x *Node) GetInitializers() []*NodeInitializer {
	if x != nil {
		return x.Initializers
	}
	return nil
}

func (x *Node) GetServiceFramework() Framework {
	if x != nil {
		return x.ServiceFramework
	}
	return Framework_FRAMEWORK_UNSPECIFIED
}

func (x *Node) GetReference() []*Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Node) GetUserImports() []string {
	if x != nil {
		return x.UserImports
	}
	return nil
}

func (x *Node) GetExt() []*anypb.Any {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Node) GetRequiredStorage() []*RequiredStorage {
	if x != nil {
		return x.RequiredStorage
	}
	return nil
}

func (x *Node) GetEnvironmentRequirement() *Node_EnvironmentRequirement {
	if x != nil {
		return x.EnvironmentRequirement
	}
	return nil
}

type NodeInitializer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Framework        Framework `protobuf:"varint,1,opt,name=framework,proto3,enum=foundation.schema.Framework" json:"framework,omitempty"`
	InitializeBefore []string  `protobuf:"bytes,2,rep,name=initialize_before,json=initializeBefore,proto3" json:"initialize_before,omitempty"` // Package name.
	InitializeAfter  []string  `protobuf:"bytes,3,rep,name=initialize_after,json=initializeAfter,proto3" json:"initialize_after,omitempty"`    // Package name.
}

func (x *NodeInitializer) Reset() {
	*x = NodeInitializer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInitializer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInitializer) ProtoMessage() {}

func (x *NodeInitializer) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInitializer.ProtoReflect.Descriptor instead.
func (*NodeInitializer) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{3}
}

func (x *NodeInitializer) GetFramework() Framework {
	if x != nil {
		return x.Framework
	}
	return Framework_FRAMEWORK_UNSPECIFIED
}

func (x *NodeInitializer) GetInitializeBefore() []string {
	if x != nil {
		return x.InitializeBefore
	}
	return nil
}

func (x *NodeInitializer) GetInitializeAfter() []string {
	if x != nil {
		return x.InitializeAfter
	}
	return nil
}

type HttpPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *HttpPath) Reset() {
	*x = HttpPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpPath) ProtoMessage() {}

func (x *HttpPath) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpPath.ProtoReflect.Descriptor instead.
func (*HttpPath) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{4}
}

func (x *HttpPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpPath) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// XXX needs are at odds with instanced nodes; both provide means for the node to
// use data+behavior provided by another part of the system. Provides is a better
// model as it's more flexible. Needs are a necessary level right now to get core
// types instantiated (e.g. ports).
type Need struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CuePath string `protobuf:"bytes,1,opt,name=cue_path,json=cuePath,proto3" json:"cue_path,omitempty"`
	// Types that are assignable to Type:
	//	*Need_Port_
	Type isNeed_Type `protobuf_oneof:"type"`
}

func (x *Need) Reset() {
	*x = Need{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Need) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Need) ProtoMessage() {}

func (x *Need) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Need.ProtoReflect.Descriptor instead.
func (*Need) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{5}
}

func (x *Need) GetCuePath() string {
	if x != nil {
		return x.CuePath
	}
	return ""
}

func (m *Need) GetType() isNeed_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Need) GetPort() *Need_Port {
	if x, ok := x.GetType().(*Need_Port_); ok {
		return x.Port
	}
	return nil
}

type isNeed_Type interface {
	isNeed_Type()
}

type Need_Port_ struct {
	Port *Need_Port `protobuf:"bytes,2,opt,name=port,proto3,oneof"`
}

func (*Need_Port_) isNeed_Type() {}

type Provides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type        *TypeDef                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AvailableIn []*Provides_AvailableIn `protobuf:"bytes,3,rep,name=available_in,json=availableIn,proto3" json:"available_in,omitempty"`
	// Scoped dependencies instantiated for this provided type.
	Instantiate []*Instantiate `protobuf:"bytes,4,rep,name=instantiate,proto3" json:"instantiate,omitempty"`
}

func (x *Provides) Reset() {
	*x = Provides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provides) ProtoMessage() {}

func (x *Provides) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provides.ProtoReflect.Descriptor instead.
func (*Provides) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6}
}

func (x *Provides) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Provides) GetType() *TypeDef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Provides) GetAvailableIn() []*Provides_AvailableIn {
	if x != nil {
		return x.AvailableIn
	}
	return nil
}

func (x *Provides) GetInstantiate() []*Instantiate {
	if x != nil {
		return x.Instantiate
	}
	return nil
}

type TypeDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type made available for configuration.
	Typename string `protobuf:"bytes,1,opt,name=typename,proto3" json:"typename,omitempty"`
	// Paths to the protos that define the types available as a provider. Paths
	// must be relative to the package.
	Source []string `protobuf:"bytes,2,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *TypeDef) Reset() {
	*x = TypeDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDef) ProtoMessage() {}

func (x *TypeDef) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDef.ProtoReflect.Descriptor instead.
func (*TypeDef) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{7}
}

func (x *TypeDef) GetTypename() string {
	if x != nil {
		return x.Typename
	}
	return ""
}

func (x *TypeDef) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

type GrpcExportService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paths to the protos that defines the service. Paths must be
	// relative to the package.
	Proto []string `protobuf:"bytes,1,rep,name=proto,proto3" json:"proto,omitempty"`
	// The type of the service being exported.
	ProtoTypename string `protobuf:"bytes,2,opt,name=proto_typename,json=protoTypename,proto3" json:"proto_typename,omitempty"`
	// A subset of methods this implementation supports. If empty, the implementation supports all methods.
	Method []string `protobuf:"bytes,3,rep,name=method,proto3" json:"method,omitempty"`
}

func (x *GrpcExportService) Reset() {
	*x = GrpcExportService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcExportService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcExportService) ProtoMessage() {}

func (x *GrpcExportService) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcExportService.ProtoReflect.Descriptor instead.
func (*GrpcExportService) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{8}
}

func (x *GrpcExportService) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *GrpcExportService) GetProtoTypename() string {
	if x != nil {
		return x.ProtoTypename
	}
	return ""
}

func (x *GrpcExportService) GetMethod() []string {
	if x != nil {
		return x.Method
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        Reference_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=foundation.schema.Reference_Kind" json:"kind,omitempty"`
	CuePath     string         `protobuf:"bytes,2,opt,name=cue_path,json=cuePath,proto3" json:"cue_path,omitempty"`
	Image       string         `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	PackageName string         `protobuf:"bytes,4,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	FilePath    []string       `protobuf:"bytes,5,rep,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // Relative to the module's path.
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{9}
}

func (x *Reference) GetKind() Reference_Kind {
	if x != nil {
		return x.Kind
	}
	return Reference_KIND_UNSPECIFIED
}

func (x *Reference) GetCuePath() string {
	if x != nil {
		return x.CuePath
	}
	return ""
}

func (x *Reference) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Reference) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Reference) GetFilePath() []string {
	if x != nil {
		return x.FilePath
	}
	return nil
}

// Next ID: 26
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package name (computed).
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// The module name (computed).
	ModuleName string `protobuf:"bytes,5,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// In order to decouple code location and production resources, we refer
	// to the service through it's ID; which must remain constant during the
	// life of the service.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A name for a person-user to read and refer to.
	Name        string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *Server_Description `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	// The computed list of dependency URLs of this server (direct and indirect).
	Import []string `protobuf:"bytes,4,rep,name=import,proto3" json:"import,omitempty"`
	// Framework-specific extensions.
	Ext []*anypb.Any `protobuf:"bytes,6,rep,name=ext,proto3" json:"ext,omitempty"`
	// All of the allocations performed in this server's dependency tree.
	Allocation []*Allocation `protobuf:"bytes,7,rep,name=allocation,proto3" json:"allocation,omitempty"`
	Framework  Framework     `protobuf:"varint,8,opt,name=framework,proto3,enum=foundation.schema.Framework" json:"framework,omitempty"`
	IsStateful bool          `protobuf:"varint,20,opt,name=is_stateful,json=isStateful,proto3" json:"is_stateful,omitempty"`
	// This server is meant to be used for tests, and should not be deployed by default.
	Testonly bool `protobuf:"varint,21,opt,name=testonly,proto3" json:"testonly,omitempty"`
	// This server acts as an admin to the cluster.
	ClusterAdmin bool                  `protobuf:"varint,22,opt,name=cluster_admin,json=clusterAdmin,proto3" json:"cluster_admin,omitempty"`
	Binary       *Server_Binary        `protobuf:"bytes,9,opt,name=binary,proto3" json:"binary,omitempty"`
	Service      []*Server_ServiceSpec `protobuf:"bytes,10,rep,name=service,proto3" json:"service,omitempty"`
	Ingress      []*Server_ServiceSpec `protobuf:"bytes,11,rep,name=ingress,proto3" json:"ingress,omitempty"`
	Reference    []*Reference          `protobuf:"bytes,12,rep,name=reference,proto3" json:"reference,omitempty"`
	// XXX temporary.
	StaticEnv []*BinaryConfig_EnvEntry `protobuf:"bytes,13,rep,name=static_env,json=staticEnv,proto3" json:"static_env,omitempty"`
	// Set of dependencies specified explicitly by the user.
	UserImports []string `protobuf:"bytes,14,rep,name=user_imports,json=userImports,proto3" json:"user_imports,omitempty"`
	// Set of URL prefixes this server declares supporting.
	UrlMap []*Server_URLMapEntry `protobuf:"bytes,15,rep,name=url_map,json=urlMap,proto3" json:"url_map,omitempty"`
	// A set of ports that this server exports and require no configuration.
	StaticPort []*Endpoint_Port `protobuf:"bytes,16,rep,name=static_port,json=staticPort,proto3" json:"static_port,omitempty"`
	// Aggregated from all nodes.
	RequiredStorage        []*RequiredStorage               `protobuf:"bytes,18,rep,name=required_storage,json=requiredStorage,proto3" json:"required_storage,omitempty"`
	EnvironmentRequirement []*Server_EnvironmentRequirement `protobuf:"bytes,24,rep,name=environment_requirement,json=environmentRequirement,proto3" json:"environment_requirement,omitempty"`
	Integration            *Server_Integration              `protobuf:"bytes,25,opt,name=integration,proto3" json:"integration,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10}
}

func (x *Server) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Server) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Server) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetDescription() *Server_Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Server) GetImport() []string {
	if x != nil {
		return x.Import
	}
	return nil
}

func (x *Server) GetExt() []*anypb.Any {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Server) GetAllocation() []*Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *Server) GetFramework() Framework {
	if x != nil {
		return x.Framework
	}
	return Framework_FRAMEWORK_UNSPECIFIED
}

func (x *Server) GetIsStateful() bool {
	if x != nil {
		return x.IsStateful
	}
	return false
}

func (x *Server) GetTestonly() bool {
	if x != nil {
		return x.Testonly
	}
	return false
}

func (x *Server) GetClusterAdmin() bool {
	if x != nil {
		return x.ClusterAdmin
	}
	return false
}

func (x *Server) GetBinary() *Server_Binary {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *Server) GetService() []*Server_ServiceSpec {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Server) GetIngress() []*Server_ServiceSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *Server) GetReference() []*Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Server) GetStaticEnv() []*BinaryConfig_EnvEntry {
	if x != nil {
		return x.StaticEnv
	}
	return nil
}

func (x *Server) GetUserImports() []string {
	if x != nil {
		return x.UserImports
	}
	return nil
}

func (x *Server) GetUrlMap() []*Server_URLMapEntry {
	if x != nil {
		return x.UrlMap
	}
	return nil
}

func (x *Server) GetStaticPort() []*Endpoint_Port {
	if x != nil {
		return x.StaticPort
	}
	return nil
}

func (x *Server) GetRequiredStorage() []*RequiredStorage {
	if x != nil {
		return x.RequiredStorage
	}
	return nil
}

func (x *Server) GetEnvironmentRequirement() []*Server_EnvironmentRequirement {
	if x != nil {
		return x.EnvironmentRequirement
	}
	return nil
}

func (x *Server) GetIntegration() *Server_Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

// Allocations for a tree of instanced values.
type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance []*Allocation_Instance `protobuf:"bytes,1,rep,name=instance,proto3" json:"instance,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{11}
}

func (x *Allocation) GetInstance() []*Allocation_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type Instantiate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName string `protobuf:"bytes,3,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// A unique name used to refer and configure this dependency.
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Constructor *anypb.Any `protobuf:"bytes,2,opt,name=constructor,proto3" json:"constructor,omitempty"`
}

func (x *Instantiate) Reset() {
	*x = Instantiate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instantiate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instantiate) ProtoMessage() {}

func (x *Instantiate) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instantiate.ProtoReflect.Descriptor instead.
func (*Instantiate) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{12}
}

func (x *Instantiate) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Instantiate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Instantiate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instantiate) GetConstructor() *anypb.Any {
	if x != nil {
		return x.Constructor
	}
	return nil
}

type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Runtime string              `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"` // E.g. kubernetes
	Purpose Environment_Purpose `protobuf:"varint,3,opt,name=purpose,proto3,enum=foundation.schema.Environment_Purpose" json:"purpose,omitempty"`
	// Typically only set for tests. Signals that this environment is single-use and not meant to be user serviceable.
	Ephemeral bool                 `protobuf:"varint,4,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
	Labels    []*Environment_Label `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{13}
}

func (x *Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Environment) GetPurpose() Environment_Purpose {
	if x != nil {
		return x.Purpose
	}
	return Environment_PURPOSE_UNKNOWN
}

func (x *Environment) GetEphemeral() bool {
	if x != nil {
		return x.Ephemeral
	}
	return false
}

func (x *Environment) GetLabels() []*Environment_Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Architecture field specifies the CPU architecture, for example
	// `amd64` or `ppc64`.
	Architecture string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// OS specifies the operating system, for example `linux` or `windows`.
	Os      string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{14}
}

func (x *Platform) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Platform) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Platform) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

type HttpExportedService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HttpExportedService) Reset() {
	*x = HttpExportedService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpExportedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpExportedService) ProtoMessage() {}

func (x *HttpExportedService) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpExportedService.ProtoReflect.Descriptor instead.
func (*HttpExportedService) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{15}
}

func (x *HttpExportedService) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RequiredStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner        string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"` // Package name.
	PersistentId string `protobuf:"bytes,2,opt,name=persistent_id,json=persistentId,proto3" json:"persistent_id,omitempty"`
	ByteCount    uint64 `protobuf:"varint,3,opt,name=byte_count,json=byteCount,proto3" json:"byte_count,omitempty"`
	MountPath    string `protobuf:"bytes,4,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *RequiredStorage) Reset() {
	*x = RequiredStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredStorage) ProtoMessage() {}

func (x *RequiredStorage) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredStorage.ProtoReflect.Descriptor instead.
func (*RequiredStorage) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{16}
}

func (x *RequiredStorage) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *RequiredStorage) GetPersistentId() string {
	if x != nil {
		return x.PersistentId
	}
	return ""
}

func (x *RequiredStorage) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *RequiredStorage) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type Naming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithOrg                 string                         `protobuf:"bytes,1,opt,name=with_org,json=withOrg,proto3" json:"with_org,omitempty"`                                                   // Allocate with the following organization.
	AdditionalUserSpecified []*Naming_AdditionalDomainName `protobuf:"bytes,2,rep,name=additional_user_specified,json=additionalUserSpecified,proto3" json:"additional_user_specified,omitempty"` // If set, also configures the ingress with these domains.
	AdditionalTlsManaged    []*Naming_AdditionalDomainName `protobuf:"bytes,3,rep,name=additional_tls_managed,json=additionalTlsManaged,proto3" json:"additional_tls_managed,omitempty"`          // If set, both configures an ingress with these domains, and requests TLS certificate from Foundation.
}

func (x *Naming) Reset() {
	*x = Naming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Naming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Naming) ProtoMessage() {}

func (x *Naming) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Naming.ProtoReflect.Descriptor instead.
func (*Naming) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{17}
}

func (x *Naming) GetWithOrg() string {
	if x != nil {
		return x.WithOrg
	}
	return ""
}

func (x *Naming) GetAdditionalUserSpecified() []*Naming_AdditionalDomainName {
	if x != nil {
		return x.AdditionalUserSpecified
	}
	return nil
}

func (x *Naming) GetAdditionalTlsManaged() []*Naming_AdditionalDomainName {
	if x != nil {
		return x.AdditionalTlsManaged
	}
	return nil
}

type ComputedNaming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source                  *Naming            `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	BaseDomain              string             `protobuf:"bytes,2,opt,name=base_domain,json=baseDomain,proto3" json:"base_domain,omitempty"` // E.g. {org}.nscloud.dev
	Managed                 Domain_ManagedType `protobuf:"varint,3,opt,name=managed,proto3,enum=foundation.schema.Domain_ManagedType" json:"managed,omitempty"`
	TlsFrontend             bool               `protobuf:"varint,4,opt,name=tls_frontend,json=tlsFrontend,proto3" json:"tls_frontend,omitempty"`                                       // If true, these addresses will be TLS terminated.
	TlsInclusterTermination bool               `protobuf:"varint,5,opt,name=tls_incluster_termination,json=tlsInclusterTermination,proto3" json:"tls_incluster_termination,omitempty"` // If set to true, we manage the TLS termination in cluster.
	DomainFragmentSuffix    string             `protobuf:"bytes,6,opt,name=domain_fragment_suffix,json=domainFragmentSuffix,proto3" json:"domain_fragment_suffix,omitempty"`           // If set, domain name generation will use this suffix rather than creating a new sub-domain.
	UseShortAlias           bool               `protobuf:"varint,7,opt,name=use_short_alias,json=useShortAlias,proto3" json:"use_short_alias,omitempty"`                               // Enable new endpoint alias generation.
	MainModuleName          string             `protobuf:"bytes,8,opt,name=main_module_name,json=mainModuleName,proto3" json:"main_module_name,omitempty"`
}

func (x *ComputedNaming) Reset() {
	*x = ComputedNaming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputedNaming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputedNaming) ProtoMessage() {}

func (x *ComputedNaming) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputedNaming.ProtoReflect.Descriptor instead.
func (*ComputedNaming) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{18}
}

func (x *ComputedNaming) GetSource() *Naming {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ComputedNaming) GetBaseDomain() string {
	if x != nil {
		return x.BaseDomain
	}
	return ""
}

func (x *ComputedNaming) GetManaged() Domain_ManagedType {
	if x != nil {
		return x.Managed
	}
	return Domain_MANAGED_UNKNOWN
}

func (x *ComputedNaming) GetTlsFrontend() bool {
	if x != nil {
		return x.TlsFrontend
	}
	return false
}

func (x *ComputedNaming) GetTlsInclusterTermination() bool {
	if x != nil {
		return x.TlsInclusterTermination
	}
	return false
}

func (x *ComputedNaming) GetDomainFragmentSuffix() string {
	if x != nil {
		return x.DomainFragmentSuffix
	}
	return ""
}

func (x *ComputedNaming) GetUseShortAlias() bool {
	if x != nil {
		return x.UseShortAlias
	}
	return false
}

func (x *ComputedNaming) GetMainModuleName() string {
	if x != nil {
		return x.MainModuleName
	}
	return ""
}

type Stack_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server       *Server `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	ServerNaming *Naming `protobuf:"bytes,3,opt,name=server_naming,json=serverNaming,proto3" json:"server_naming,omitempty"`
	Node         []*Node `protobuf:"bytes,2,rep,name=node,proto3" json:"node,omitempty"`
}

func (x *Stack_Entry) Reset() {
	*x = Stack_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stack_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack_Entry) ProtoMessage() {}

func (x *Stack_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack_Entry.ProtoReflect.Descriptor instead.
func (*Stack_Entry) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Stack_Entry) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Stack_Entry) GetServerNaming() *Naming {
	if x != nil {
		return x.ServerNaming
	}
	return nil
}

func (x *Stack_Entry) GetNode() []*Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type Node_EnvironmentRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentHasLabel         []*Environment_Label `protobuf:"bytes,1,rep,name=environment_has_label,json=environmentHasLabel,proto3" json:"environment_has_label,omitempty"`
	EnvironmentDoesNotHaveLabel []*Environment_Label `protobuf:"bytes,2,rep,name=environment_does_not_have_label,json=environmentDoesNotHaveLabel,proto3" json:"environment_does_not_have_label,omitempty"`
}

func (x *Node_EnvironmentRequirement) Reset() {
	*x = Node_EnvironmentRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_EnvironmentRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_EnvironmentRequirement) ProtoMessage() {}

func (x *Node_EnvironmentRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_EnvironmentRequirement.ProtoReflect.Descriptor instead.
func (*Node_EnvironmentRequirement) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Node_EnvironmentRequirement) GetEnvironmentHasLabel() []*Environment_Label {
	if x != nil {
		return x.EnvironmentHasLabel
	}
	return nil
}

func (x *Node_EnvironmentRequirement) GetEnvironmentDoesNotHaveLabel() []*Environment_Label {
	if x != nil {
		return x.EnvironmentDoesNotHaveLabel
	}
	return nil
}

type Need_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Need_Port) Reset() {
	*x = Need_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Need_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Need_Port) ProtoMessage() {}

func (x *Need_Port) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Need_Port.ProtoReflect.Descriptor instead.
func (*Need_Port) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Need_Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Provides_AvailableIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Go     *Provides_AvailableIn_Go     `protobuf:"bytes,1,opt,name=go,proto3" json:"go,omitempty"`
	Web    *Provides_AvailableIn_Web    `protobuf:"bytes,2,opt,name=web,proto3" json:"web,omitempty"`
	Nodejs *Provides_AvailableIn_NodeJs `protobuf:"bytes,3,opt,name=nodejs,proto3" json:"nodejs,omitempty"`
}

func (x *Provides_AvailableIn) Reset() {
	*x = Provides_AvailableIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provides_AvailableIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provides_AvailableIn) ProtoMessage() {}

func (x *Provides_AvailableIn) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provides_AvailableIn.ProtoReflect.Descriptor instead.
func (*Provides_AvailableIn) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Provides_AvailableIn) GetGo() *Provides_AvailableIn_Go {
	if x != nil {
		return x.Go
	}
	return nil
}

func (x *Provides_AvailableIn) GetWeb() *Provides_AvailableIn_Web {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *Provides_AvailableIn) GetNodejs() *Provides_AvailableIn_NodeJs {
	if x != nil {
		return x.Nodejs
	}
	return nil
}

type Provides_AvailableIn_Go struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Provides_AvailableIn_Go) Reset() {
	*x = Provides_AvailableIn_Go{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provides_AvailableIn_Go) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provides_AvailableIn_Go) ProtoMessage() {}

func (x *Provides_AvailableIn_Go) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provides_AvailableIn_Go.ProtoReflect.Descriptor instead.
func (*Provides_AvailableIn_Go) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *Provides_AvailableIn_Go) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *Provides_AvailableIn_Go) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Provides_AvailableIn_Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Provides_AvailableIn_Web) Reset() {
	*x = Provides_AvailableIn_Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provides_AvailableIn_Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provides_AvailableIn_Web) ProtoMessage() {}

func (x *Provides_AvailableIn_Web) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provides_AvailableIn_Web.ProtoReflect.Descriptor instead.
func (*Provides_AvailableIn_Web) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6, 0, 1}
}

type Provides_AvailableIn_NodeJs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Import string `protobuf:"bytes,1,opt,name=import,proto3" json:"import,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Provides_AvailableIn_NodeJs) Reset() {
	*x = Provides_AvailableIn_NodeJs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provides_AvailableIn_NodeJs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provides_AvailableIn_NodeJs) ProtoMessage() {}

func (x *Provides_AvailableIn_NodeJs) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provides_AvailableIn_NodeJs.ProtoReflect.Descriptor instead.
func (*Provides_AvailableIn_NodeJs) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{6, 0, 2}
}

func (x *Provides_AvailableIn_NodeJs) GetImport() string {
	if x != nil {
		return x.Import
	}
	return ""
}

func (x *Provides_AvailableIn_NodeJs) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Server_Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prebuilt    string `protobuf:"bytes,1,opt,name=prebuilt,proto3" json:"prebuilt,omitempty"`
	PackageName string `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
}

func (x *Server_Binary) Reset() {
	*x = Server_Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Binary) ProtoMessage() {}

func (x *Server_Binary) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Binary.ProtoReflect.Descriptor instead.
func (*Server_Binary) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Server_Binary) GetPrebuilt() string {
	if x != nil {
		return x.Prebuilt
	}
	return ""
}

func (x *Server_Binary) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type Server_ServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label    string             `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Metadata []*ServiceMetadata `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Port     *Endpoint_Port     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Internal bool               `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"` // This service is of no relevance for development.
}

func (x *Server_ServiceSpec) Reset() {
	*x = Server_ServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_ServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_ServiceSpec) ProtoMessage() {}

func (x *Server_ServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_ServiceSpec.ProtoReflect.Descriptor instead.
func (*Server_ServiceSpec) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Server_ServiceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server_ServiceSpec) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Server_ServiceSpec) GetMetadata() []*ServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Server_ServiceSpec) GetPort() *Endpoint_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Server_ServiceSpec) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

type Server_URLMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathPrefix  string `protobuf:"bytes,1,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	PackageName string `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	IngressName string `protobuf:"bytes,3,opt,name=ingress_name,json=ingressName,proto3" json:"ingress_name,omitempty"`
	Kind        string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *Server_URLMapEntry) Reset() {
	*x = Server_URLMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_URLMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_URLMapEntry) ProtoMessage() {}

func (x *Server_URLMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_URLMapEntry.ProtoReflect.Descriptor instead.
func (*Server_URLMapEntry) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Server_URLMapEntry) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Server_URLMapEntry) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Server_URLMapEntry) GetIngressName() string {
	if x != nil {
		return x.IngressName
	}
	return ""
}

func (x *Server_URLMapEntry) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type Server_Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label   string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *Server_Description) Reset() {
	*x = Server_Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Description) ProtoMessage() {}

func (x *Server_Description) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Description.ProtoReflect.Descriptor instead.
func (*Server_Description) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Server_Description) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Server_Description) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Server_Description) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type Server_EnvironmentRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package                     string               `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	EnvironmentHasLabel         []*Environment_Label `protobuf:"bytes,2,rep,name=environment_has_label,json=environmentHasLabel,proto3" json:"environment_has_label,omitempty"`
	EnvironmentDoesNotHaveLabel []*Environment_Label `protobuf:"bytes,3,rep,name=environment_does_not_have_label,json=environmentDoesNotHaveLabel,proto3" json:"environment_does_not_have_label,omitempty"`
}

func (x *Server_EnvironmentRequirement) Reset() {
	*x = Server_EnvironmentRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_EnvironmentRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_EnvironmentRequirement) ProtoMessage() {}

func (x *Server_EnvironmentRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_EnvironmentRequirement.ProtoReflect.Descriptor instead.
func (*Server_EnvironmentRequirement) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 4}
}

func (x *Server_EnvironmentRequirement) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *Server_EnvironmentRequirement) GetEnvironmentHasLabel() []*Environment_Label {
	if x != nil {
		return x.EnvironmentHasLabel
	}
	return nil
}

func (x *Server_EnvironmentRequirement) GetEnvironmentDoesNotHaveLabel() []*Environment_Label {
	if x != nil {
		return x.EnvironmentDoesNotHaveLabel
	}
	return nil
}

type Server_Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// TODO: define kind-specific fields in a generic way.
	Dockerfile string `protobuf:"bytes,2,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
}

func (x *Server_Integration) Reset() {
	*x = Server_Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Integration) ProtoMessage() {}

func (x *Server_Integration) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Integration.ProtoReflect.Descriptor instead.
func (*Server_Integration) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{10, 5}
}

func (x *Server_Integration) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Server_Integration) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

type Allocation_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the allocation.
	InstanceOwner string `protobuf:"bytes,1,opt,name=instance_owner,json=instanceOwner,proto3" json:"instance_owner,omitempty"`
	// The owning package of the fields being instantiated.
	PackageName string `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// An unique name within the server for this allocation path.
	AllocName    string         `protobuf:"bytes,3,opt,name=alloc_name,json=allocName,proto3" json:"alloc_name,omitempty"`
	Instantiated []*Instantiate `protobuf:"bytes,4,rep,name=instantiated,proto3" json:"instantiated,omitempty"`
	// Allocations that happen as a result of this allocation (e.g. an instance
	// of a dependency).
	DownstreamAllocation []*Allocation `protobuf:"bytes,5,rep,name=downstream_allocation,json=downstreamAllocation,proto3" json:"downstream_allocation,omitempty"`
}

func (x *Allocation_Instance) Reset() {
	*x = Allocation_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocation_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_Instance) ProtoMessage() {}

func (x *Allocation_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_Instance.ProtoReflect.Descriptor instead.
func (*Allocation_Instance) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Allocation_Instance) GetInstanceOwner() string {
	if x != nil {
		return x.InstanceOwner
	}
	return ""
}

func (x *Allocation_Instance) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Allocation_Instance) GetAllocName() string {
	if x != nil {
		return x.AllocName
	}
	return ""
}

func (x *Allocation_Instance) GetInstantiated() []*Instantiate {
	if x != nil {
		return x.Instantiated
	}
	return nil
}

func (x *Allocation_Instance) GetDownstreamAllocation() []*Allocation {
	if x != nil {
		return x.DownstreamAllocation
	}
	return nil
}

type Environment_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Environment_Label) Reset() {
	*x = Environment_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment_Label) ProtoMessage() {}

func (x *Environment_Label) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment_Label.ProtoReflect.Descriptor instead.
func (*Environment_Label) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Environment_Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Environment_Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Naming_AdditionalDomainName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedName string `protobuf:"bytes,1,opt,name=allocated_name,json=allocatedName,proto3" json:"allocated_name,omitempty"`
	Fqdn          string `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
}

func (x *Naming_AdditionalDomainName) Reset() {
	*x = Naming_AdditionalDomainName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_schema_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Naming_AdditionalDomainName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Naming_AdditionalDomainName) ProtoMessage() {}

func (x *Naming_AdditionalDomainName) ProtoReflect() protoreflect.Message {
	mi := &file_schema_schema_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Naming_AdditionalDomainName.ProtoReflect.Descriptor instead.
func (*Naming_AdditionalDomainName) Descriptor() ([]byte, []int) {
	return file_schema_schema_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Naming_AdditionalDomainName) GetAllocatedName() string {
	if x != nil {
		return x.AllocatedName
	}
	return ""
}

func (x *Naming_AdditionalDomainName) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

var File_schema_schema_proto protoreflect.FileDescriptor

var file_schema_schema_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x31, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xf2, 0x02, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xa7, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xdf,
	0x0a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x65, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x04, 0x6e, 0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x61, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x73, 0x48,
	0x74, 0x74, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x74, 0x74,
	0x70, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0xde, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x15, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x1f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x76,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x1b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x38, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x79, 0x0a, 0x04,
	0x4e, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x32, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x4e, 0x65, 0x65, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x1a, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x04, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x66, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x12, 0x3a, 0x0a, 0x02, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x2e, 0x47, 0x6f, 0x52, 0x02,
	0x67, 0x6f, 0x12, 0x3d, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65,
	0x62, 0x12, 0x46, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4a,
	0x73, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x1a, 0x32, 0x0a, 0x02, 0x47, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x05, 0x0a,
	0x03, 0x57, 0x65, 0x62, 0x1a, 0x34, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x4a, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x07, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x47, 0x72, 0x70,
	0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x53, 0x10, 0x04, 0x22, 0x82, 0x10, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x3f,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x45, 0x6e, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x52, 0x4c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x75, 0x72, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47,
	0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x88, 0x01, 0x0a, 0x0b, 0x55, 0x52,
	0x4c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x50, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0xf8, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x1f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x1b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x1a, 0x41, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x66, 0x69, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14,
	0x22, 0xde, 0x02, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x1a, 0x8b, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x52, 0x0a,
	0x15, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xda, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x31, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x22, 0x58, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x48,
	0x74, 0x74, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xc8, 0x02, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x72, 0x67, 0x12, 0x6a, 0x0a, 0x19, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x17, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x6c, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x1a, 0x51, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x22, 0x8c,
	0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6c,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x6c, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x6c,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x4f, 0x0a,
	0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x45, 0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x44, 0x45, 0x4a, 0x53,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x04, 0x42, 0x25,
	0x5a, 0x23, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_schema_proto_rawDescOnce sync.Once
	file_schema_schema_proto_rawDescData = file_schema_schema_proto_rawDesc
)

func file_schema_schema_proto_rawDescGZIP() []byte {
	file_schema_schema_proto_rawDescOnce.Do(func() {
		file_schema_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_schema_proto_rawDescData)
	})
	return file_schema_schema_proto_rawDescData
}

var file_schema_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_schema_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_schema_schema_proto_goTypes = []interface{}{
	(Framework)(0),                        // 0: foundation.schema.Framework
	(Node_Kind)(0),                        // 1: foundation.schema.Node.Kind
	(Reference_Kind)(0),                   // 2: foundation.schema.Reference.Kind
	(Environment_Purpose)(0),              // 3: foundation.schema.Environment.Purpose
	(*Schema)(nil),                        // 4: foundation.schema.Schema
	(*Stack)(nil),                         // 5: foundation.schema.Stack
	(*Node)(nil),                          // 6: foundation.schema.Node
	(*NodeInitializer)(nil),               // 7: foundation.schema.NodeInitializer
	(*HttpPath)(nil),                      // 8: foundation.schema.HttpPath
	(*Need)(nil),                          // 9: foundation.schema.Need
	(*Provides)(nil),                      // 10: foundation.schema.Provides
	(*TypeDef)(nil),                       // 11: foundation.schema.TypeDef
	(*GrpcExportService)(nil),             // 12: foundation.schema.GrpcExportService
	(*Reference)(nil),                     // 13: foundation.schema.Reference
	(*Server)(nil),                        // 14: foundation.schema.Server
	(*Allocation)(nil),                    // 15: foundation.schema.Allocation
	(*Instantiate)(nil),                   // 16: foundation.schema.Instantiate
	(*Environment)(nil),                   // 17: foundation.schema.Environment
	(*Platform)(nil),                      // 18: foundation.schema.Platform
	(*HttpExportedService)(nil),           // 19: foundation.schema.HttpExportedService
	(*RequiredStorage)(nil),               // 20: foundation.schema.RequiredStorage
	(*Naming)(nil),                        // 21: foundation.schema.Naming
	(*ComputedNaming)(nil),                // 22: foundation.schema.ComputedNaming
	(*Stack_Entry)(nil),                   // 23: foundation.schema.Stack.Entry
	(*Node_EnvironmentRequirement)(nil),   // 24: foundation.schema.Node.EnvironmentRequirement
	(*Need_Port)(nil),                     // 25: foundation.schema.Need.Port
	(*Provides_AvailableIn)(nil),          // 26: foundation.schema.Provides.AvailableIn
	(*Provides_AvailableIn_Go)(nil),       // 27: foundation.schema.Provides.AvailableIn.Go
	(*Provides_AvailableIn_Web)(nil),      // 28: foundation.schema.Provides.AvailableIn.Web
	(*Provides_AvailableIn_NodeJs)(nil),   // 29: foundation.schema.Provides.AvailableIn.NodeJs
	(*Server_Binary)(nil),                 // 30: foundation.schema.Server.Binary
	(*Server_ServiceSpec)(nil),            // 31: foundation.schema.Server.ServiceSpec
	(*Server_URLMapEntry)(nil),            // 32: foundation.schema.Server.URLMapEntry
	(*Server_Description)(nil),            // 33: foundation.schema.Server.Description
	(*Server_EnvironmentRequirement)(nil), // 34: foundation.schema.Server.EnvironmentRequirement
	(*Server_Integration)(nil),            // 35: foundation.schema.Server.Integration
	(*Allocation_Instance)(nil),           // 36: foundation.schema.Allocation.Instance
	(*Environment_Label)(nil),             // 37: foundation.schema.Environment.Label
	(*Naming_AdditionalDomainName)(nil),   // 38: foundation.schema.Naming.AdditionalDomainName
	(*Endpoint)(nil),                      // 39: foundation.schema.Endpoint
	(*InternalEndpoint)(nil),              // 40: foundation.schema.InternalEndpoint
	(Endpoint_Type)(0),                    // 41: foundation.schema.Endpoint.Type
	(*anypb.Any)(nil),                     // 42: google.protobuf.Any
	(*BinaryConfig_EnvEntry)(nil),         // 43: foundation.schema.BinaryConfig.EnvEntry
	(*Endpoint_Port)(nil),                 // 44: foundation.schema.Endpoint.Port
	(Domain_ManagedType)(0),               // 45: foundation.schema.Domain.ManagedType
	(*ServiceMetadata)(nil),               // 46: foundation.schema.ServiceMetadata
}
var file_schema_schema_proto_depIdxs = []int32{
	6,  // 0: foundation.schema.Schema.service:type_name -> foundation.schema.Node
	6,  // 1: foundation.schema.Schema.extension:type_name -> foundation.schema.Node
	14, // 2: foundation.schema.Schema.server:type_name -> foundation.schema.Server
	23, // 3: foundation.schema.Stack.entry:type_name -> foundation.schema.Stack.Entry
	39, // 4: foundation.schema.Stack.endpoint:type_name -> foundation.schema.Endpoint
	40, // 5: foundation.schema.Stack.internal_endpoint:type_name -> foundation.schema.InternalEndpoint
	1,  // 6: foundation.schema.Node.kind:type_name -> foundation.schema.Node.Kind
	16, // 7: foundation.schema.Node.instantiate:type_name -> foundation.schema.Instantiate
	9,  // 8: foundation.schema.Node.need:type_name -> foundation.schema.Need
	10, // 9: foundation.schema.Node.provides:type_name -> foundation.schema.Provides
	12, // 10: foundation.schema.Node.export_service:type_name -> foundation.schema.GrpcExportService
	8,  // 11: foundation.schema.Node.export_http:type_name -> foundation.schema.HttpPath
	41, // 12: foundation.schema.Node.ingress:type_name -> foundation.schema.Endpoint.Type
	7,  // 13: foundation.schema.Node.initializers:type_name -> foundation.schema.NodeInitializer
	0,  // 14: foundation.schema.Node.service_framework:type_name -> foundation.schema.Framework
	13, // 15: foundation.schema.Node.reference:type_name -> foundation.schema.Reference
	42, // 16: foundation.schema.Node.ext:type_name -> google.protobuf.Any
	20, // 17: foundation.schema.Node.required_storage:type_name -> foundation.schema.RequiredStorage
	24, // 18: foundation.schema.Node.environment_requirement:type_name -> foundation.schema.Node.EnvironmentRequirement
	0,  // 19: foundation.schema.NodeInitializer.framework:type_name -> foundation.schema.Framework
	25, // 20: foundation.schema.Need.port:type_name -> foundation.schema.Need.Port
	11, // 21: foundation.schema.Provides.type:type_name -> foundation.schema.TypeDef
	26, // 22: foundation.schema.Provides.available_in:type_name -> foundation.schema.Provides.AvailableIn
	16, // 23: foundation.schema.Provides.instantiate:type_name -> foundation.schema.Instantiate
	2,  // 24: foundation.schema.Reference.kind:type_name -> foundation.schema.Reference.Kind
	33, // 25: foundation.schema.Server.description:type_name -> foundation.schema.Server.Description
	42, // 26: foundation.schema.Server.ext:type_name -> google.protobuf.Any
	15, // 27: foundation.schema.Server.allocation:type_name -> foundation.schema.Allocation
	0,  // 28: foundation.schema.Server.framework:type_name -> foundation.schema.Framework
	30, // 29: foundation.schema.Server.binary:type_name -> foundation.schema.Server.Binary
	31, // 30: foundation.schema.Server.service:type_name -> foundation.schema.Server.ServiceSpec
	31, // 31: foundation.schema.Server.ingress:type_name -> foundation.schema.Server.ServiceSpec
	13, // 32: foundation.schema.Server.reference:type_name -> foundation.schema.Reference
	43, // 33: foundation.schema.Server.static_env:type_name -> foundation.schema.BinaryConfig.EnvEntry
	32, // 34: foundation.schema.Server.url_map:type_name -> foundation.schema.Server.URLMapEntry
	44, // 35: foundation.schema.Server.static_port:type_name -> foundation.schema.Endpoint.Port
	20, // 36: foundation.schema.Server.required_storage:type_name -> foundation.schema.RequiredStorage
	34, // 37: foundation.schema.Server.environment_requirement:type_name -> foundation.schema.Server.EnvironmentRequirement
	35, // 38: foundation.schema.Server.integration:type_name -> foundation.schema.Server.Integration
	36, // 39: foundation.schema.Allocation.instance:type_name -> foundation.schema.Allocation.Instance
	42, // 40: foundation.schema.Instantiate.constructor:type_name -> google.protobuf.Any
	3,  // 41: foundation.schema.Environment.purpose:type_name -> foundation.schema.Environment.Purpose
	37, // 42: foundation.schema.Environment.labels:type_name -> foundation.schema.Environment.Label
	38, // 43: foundation.schema.Naming.additional_user_specified:type_name -> foundation.schema.Naming.AdditionalDomainName
	38, // 44: foundation.schema.Naming.additional_tls_managed:type_name -> foundation.schema.Naming.AdditionalDomainName
	21, // 45: foundation.schema.ComputedNaming.source:type_name -> foundation.schema.Naming
	45, // 46: foundation.schema.ComputedNaming.managed:type_name -> foundation.schema.Domain.ManagedType
	14, // 47: foundation.schema.Stack.Entry.server:type_name -> foundation.schema.Server
	21, // 48: foundation.schema.Stack.Entry.server_naming:type_name -> foundation.schema.Naming
	6,  // 49: foundation.schema.Stack.Entry.node:type_name -> foundation.schema.Node
	37, // 50: foundation.schema.Node.EnvironmentRequirement.environment_has_label:type_name -> foundation.schema.Environment.Label
	37, // 51: foundation.schema.Node.EnvironmentRequirement.environment_does_not_have_label:type_name -> foundation.schema.Environment.Label
	27, // 52: foundation.schema.Provides.AvailableIn.go:type_name -> foundation.schema.Provides.AvailableIn.Go
	28, // 53: foundation.schema.Provides.AvailableIn.web:type_name -> foundation.schema.Provides.AvailableIn.Web
	29, // 54: foundation.schema.Provides.AvailableIn.nodejs:type_name -> foundation.schema.Provides.AvailableIn.NodeJs
	46, // 55: foundation.schema.Server.ServiceSpec.metadata:type_name -> foundation.schema.ServiceMetadata
	44, // 56: foundation.schema.Server.ServiceSpec.port:type_name -> foundation.schema.Endpoint.Port
	37, // 57: foundation.schema.Server.EnvironmentRequirement.environment_has_label:type_name -> foundation.schema.Environment.Label
	37, // 58: foundation.schema.Server.EnvironmentRequirement.environment_does_not_have_label:type_name -> foundation.schema.Environment.Label
	16, // 59: foundation.schema.Allocation.Instance.instantiated:type_name -> foundation.schema.Instantiate
	15, // 60: foundation.schema.Allocation.Instance.downstream_allocation:type_name -> foundation.schema.Allocation
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_schema_schema_proto_init() }
func file_schema_schema_proto_init() {
	if File_schema_schema_proto != nil {
		return
	}
	file_schema_networking_proto_init()
	file_schema_binary_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInitializer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Need); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcExportService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instantiate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpExportedService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Naming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputedNaming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stack_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_EnvironmentRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Need_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provides_AvailableIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provides_AvailableIn_Go); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provides_AvailableIn_Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provides_AvailableIn_NodeJs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_ServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_URLMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_EnvironmentRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocation_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_schema_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Naming_AdditionalDomainName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_schema_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Need_Port_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_schema_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_schema_proto_goTypes,
		DependencyIndexes: file_schema_schema_proto_depIdxs,
		EnumInfos:         file_schema_schema_proto_enumTypes,
		MessageInfos:      file_schema_schema_proto_msgTypes,
	}.Build()
	File_schema_schema_proto = out.File
	file_schema_schema_proto_rawDesc = nil
	file_schema_schema_proto_goTypes = nil
	file_schema_schema_proto_depIdxs = nil
}
