// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: schema/storage/deploy.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Endpoint_Type int32

const (
	Endpoint_INGRESS_UNSPECIFIED Endpoint_Type = 0 // Defaults to PRIVATE in services.
	Endpoint_PRIVATE             Endpoint_Type = 1
	Endpoint_INTERNET_FACING     Endpoint_Type = 2
)

// Enum value maps for Endpoint_Type.
var (
	Endpoint_Type_name = map[int32]string{
		0: "INGRESS_UNSPECIFIED",
		1: "PRIVATE",
		2: "INTERNET_FACING",
	}
	Endpoint_Type_value = map[string]int32{
		"INGRESS_UNSPECIFIED": 0,
		"PRIVATE":             1,
		"INTERNET_FACING":     2,
	}
)

func (x Endpoint_Type) Enum() *Endpoint_Type {
	p := new(Endpoint_Type)
	*p = x
	return p
}

func (x Endpoint_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Endpoint_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_storage_deploy_proto_enumTypes[0].Descriptor()
}

func (Endpoint_Type) Type() protoreflect.EnumType {
	return &file_schema_storage_deploy_proto_enumTypes[0]
}

func (x Endpoint_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Endpoint_Type.Descriptor instead.
func (Endpoint_Type) EnumDescriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{1, 0}
}

type Domain_ManagedType int32

const (
	Domain_MANAGED_UNKNOWN            Domain_ManagedType = 0
	Domain_LOCAL_MANAGED              Domain_ManagedType = 1
	Domain_CLOUD_MANAGED              Domain_ManagedType = 2
	Domain_USER_SPECIFIED             Domain_ManagedType = 3
	Domain_USER_SPECIFIED_TLS_MANAGED Domain_ManagedType = 4
)

// Enum value maps for Domain_ManagedType.
var (
	Domain_ManagedType_name = map[int32]string{
		0: "MANAGED_UNKNOWN",
		1: "LOCAL_MANAGED",
		2: "CLOUD_MANAGED",
		3: "USER_SPECIFIED",
		4: "USER_SPECIFIED_TLS_MANAGED",
	}
	Domain_ManagedType_value = map[string]int32{
		"MANAGED_UNKNOWN":            0,
		"LOCAL_MANAGED":              1,
		"CLOUD_MANAGED":              2,
		"USER_SPECIFIED":             3,
		"USER_SPECIFIED_TLS_MANAGED": 4,
	}
)

func (x Domain_ManagedType) Enum() *Domain_ManagedType {
	p := new(Domain_ManagedType)
	*p = x
	return p
}

func (x Domain_ManagedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Domain_ManagedType) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_storage_deploy_proto_enumTypes[1].Descriptor()
}

func (Domain_ManagedType) Type() protoreflect.EnumType {
	return &file_schema_storage_deploy_proto_enumTypes[1]
}

func (x Domain_ManagedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Domain_ManagedType.Descriptor instead.
func (Domain_ManagedType) EnumDescriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{5, 0}
}

type NetworkPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: remove once "internal" is migrated to "networkplanutils"
	//
	// Deprecated: Do not use.
	Endpoint []*NetworkPlan_Endpoint `protobuf:"bytes,1,rep,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Deprecated: Do not use.
	NonLocalManaged []*NetworkPlan_Ingress `protobuf:"bytes,3,rep,name=non_local_managed,json=nonLocalManaged,proto3" json:"non_local_managed,omitempty"`
	// Deprecated: Do not use.
	NonLocalNonManaged    []*NetworkPlan_Ingress `protobuf:"bytes,4,rep,name=non_local_non_managed,json=nonLocalNonManaged,proto3" json:"non_local_non_managed,omitempty"`
	LocalHostname         string                 `protobuf:"bytes,6,opt,name=local_hostname,json=localHostname,proto3" json:"local_hostname,omitempty"`
	IngressFragments      []*IngressFragment     `protobuf:"bytes,7,rep,name=ingress_fragments,json=ingressFragments,proto3" json:"ingress_fragments,omitempty"`
	Endpoints             []*Endpoint            `protobuf:"bytes,8,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	FocusedServerPackages []string               `protobuf:"bytes,9,rep,name=focused_server_packages,json=focusedServerPackages,proto3" json:"focused_server_packages,omitempty"`
}

func (x *NetworkPlan) Reset() {
	*x = NetworkPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPlan) ProtoMessage() {}

func (x *NetworkPlan) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPlan.ProtoReflect.Descriptor instead.
func (*NetworkPlan) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *NetworkPlan) GetEndpoint() []*NetworkPlan_Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// Deprecated: Do not use.
func (x *NetworkPlan) GetNonLocalManaged() []*NetworkPlan_Ingress {
	if x != nil {
		return x.NonLocalManaged
	}
	return nil
}

// Deprecated: Do not use.
func (x *NetworkPlan) GetNonLocalNonManaged() []*NetworkPlan_Ingress {
	if x != nil {
		return x.NonLocalNonManaged
	}
	return nil
}

func (x *NetworkPlan) GetLocalHostname() string {
	if x != nil {
		return x.LocalHostname
	}
	return ""
}

func (x *NetworkPlan) GetIngressFragments() []*IngressFragment {
	if x != nil {
		return x.IngressFragments
	}
	return nil
}

func (x *NetworkPlan) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *NetworkPlan) GetFocusedServerPackages() []string {
	if x != nil {
		return x.FocusedServerPackages
	}
	return nil
}

// Needs to be consistent with networking.proto
// Next ID: 13
type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Endpoint_Type `protobuf:"varint,1,opt,name=type,proto3,enum=foundation.schema.storage.Endpoint_Type" json:"type,omitempty"`
	// The tuple (endpoint_owner, service_name) uniquely identifies an endpoint.
	ServiceName     string                      `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointOwner   string                      `protobuf:"bytes,4,opt,name=endpoint_owner,json=endpointOwner,proto3" json:"endpoint_owner,omitempty"` // Package name.
	Port            *Endpoint_Port              `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	AllocatedName   string                      `protobuf:"bytes,6,opt,name=allocated_name,json=allocatedName,proto3" json:"allocated_name,omitempty"`
	ServerOwner     string                      `protobuf:"bytes,7,opt,name=server_owner,json=serverOwner,proto3" json:"server_owner,omitempty"` // Package name.
	ServiceMetadata []*Endpoint_ServiceMetadata `protobuf:"bytes,8,rep,name=service_metadata,json=serviceMetadata,proto3" json:"service_metadata,omitempty"`
	HttpPath        []*IngressHttpPath          `protobuf:"bytes,9,rep,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"` // Only valid if type=INTERNET_FACING.
	ServiceLabel    string                      `protobuf:"bytes,10,opt,name=service_label,json=serviceLabel,proto3" json:"service_label,omitempty"`
	// Present only when running `ns dev`, NetworkPlan is not stored in this case.
	LocalPort  uint32 `protobuf:"varint,11,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	ServerName string `protobuf:"bytes,12,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *Endpoint) GetType() Endpoint_Type {
	if x != nil {
		return x.Type
	}
	return Endpoint_INGRESS_UNSPECIFIED
}

func (x *Endpoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Endpoint) GetEndpointOwner() string {
	if x != nil {
		return x.EndpointOwner
	}
	return ""
}

func (x *Endpoint) GetPort() *Endpoint_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Endpoint) GetAllocatedName() string {
	if x != nil {
		return x.AllocatedName
	}
	return ""
}

func (x *Endpoint) GetServerOwner() string {
	if x != nil {
		return x.ServerOwner
	}
	return ""
}

func (x *Endpoint) GetServiceMetadata() []*Endpoint_ServiceMetadata {
	if x != nil {
		return x.ServiceMetadata
	}
	return nil
}

func (x *Endpoint) GetHttpPath() []*IngressHttpPath {
	if x != nil {
		return x.HttpPath
	}
	return nil
}

func (x *Endpoint) GetServiceLabel() string {
	if x != nil {
		return x.ServiceLabel
	}
	return ""
}

func (x *Endpoint) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *Endpoint) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

// Needs to be consistent with networking.proto
type IngressFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Owner       string                `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"` // Server package name.
	Domain      *Domain               `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Endpoint    *Endpoint             `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	HttpPath    []*IngressHttpPath    `protobuf:"bytes,4,rep,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	GrpcService []*IngressGrpcService `protobuf:"bytes,7,rep,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"`
	Manager     string                `protobuf:"bytes,8,opt,name=manager,proto3" json:"manager,omitempty"` // If this is a specialized ingress, it may be annotated as such. E.g. with namespacelabs.dev/foundation/std/grp/httptranscoding.
}

func (x *IngressFragment) Reset() {
	*x = IngressFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressFragment) ProtoMessage() {}

func (x *IngressFragment) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressFragment.ProtoReflect.Descriptor instead.
func (*IngressFragment) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *IngressFragment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngressFragment) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IngressFragment) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *IngressFragment) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *IngressFragment) GetHttpPath() []*IngressHttpPath {
	if x != nil {
		return x.HttpPath
	}
	return nil
}

func (x *IngressFragment) GetGrpcService() []*IngressGrpcService {
	if x != nil {
		return x.GrpcService
	}
	return nil
}

func (x *IngressFragment) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

type IngressHttpPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string         `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Kind    string         `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Owner   string         `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`     // Package name.
	Service string         `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"` // Backend service.
	Port    *Endpoint_Port `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *IngressHttpPath) Reset() {
	*x = IngressHttpPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressHttpPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressHttpPath) ProtoMessage() {}

func (x *IngressHttpPath) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressHttpPath.ProtoReflect.Descriptor instead.
func (*IngressHttpPath) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *IngressHttpPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *IngressHttpPath) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *IngressHttpPath) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IngressHttpPath) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *IngressHttpPath) GetPort() *Endpoint_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type IngressGrpcService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcService string         `protobuf:"bytes,1,opt,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"` // Fully qualified name.
	Owner       string         `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`                                // Package name.
	Service     string         `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`                            // Backing service.
	Method      []string       `protobuf:"bytes,5,rep,name=method,proto3" json:"method,omitempty"`                              // If not set, forward all methods.
	Port        *Endpoint_Port `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *IngressGrpcService) Reset() {
	*x = IngressGrpcService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressGrpcService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressGrpcService) ProtoMessage() {}

func (x *IngressGrpcService) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressGrpcService.ProtoReflect.Descriptor instead.
func (*IngressGrpcService) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *IngressGrpcService) GetGrpcService() string {
	if x != nil {
		return x.GrpcService
	}
	return ""
}

func (x *IngressGrpcService) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *IngressGrpcService) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *IngressGrpcService) GetMethod() []string {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *IngressGrpcService) GetPort() *Endpoint_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn           string             `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	HasCertificate bool               `protobuf:"varint,2,opt,name=has_certificate,json=hasCertificate,proto3" json:"has_certificate,omitempty"`
	Managed        Domain_ManagedType `protobuf:"varint,3,opt,name=managed,proto3,enum=foundation.schema.storage.Domain_ManagedType" json:"managed,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{5}
}

func (x *Domain) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Domain) GetHasCertificate() bool {
	if x != nil {
		return x.HasCertificate
	}
	return false
}

func (x *Domain) GetManaged() Domain_ManagedType {
	if x != nil {
		return x.Managed
	}
	return Domain_MANAGED_UNKNOWN
}

type NetworkPlan_AccessCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url for http
	// "grpcurl" command line for grpc
	// "curl" command line for http transcoding.
	// "private:" if the service can't be accessed from outside.
	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// Whether it is managed by Namespace.
	IsManaged bool `protobuf:"varint,2,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
}

func (x *NetworkPlan_AccessCmd) Reset() {
	*x = NetworkPlan_AccessCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPlan_AccessCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPlan_AccessCmd) ProtoMessage() {}

func (x *NetworkPlan_AccessCmd) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPlan_AccessCmd.ProtoReflect.Descriptor instead.
func (*NetworkPlan_AccessCmd) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NetworkPlan_AccessCmd) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *NetworkPlan_AccessCmd) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

type NetworkPlan_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         *NetworkPlan_Label       `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Focus         bool                     `protobuf:"varint,2,opt,name=focus,proto3" json:"focus,omitempty"`
	Url           string                   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	LocalPort     uint32                   `protobuf:"varint,4,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	EndpointOwner string                   `protobuf:"bytes,5,opt,name=endpoint_owner,json=endpointOwner,proto3" json:"endpoint_owner,omitempty"`
	AccessCmd     []*NetworkPlan_AccessCmd `protobuf:"bytes,6,rep,name=access_cmd,json=accessCmd,proto3" json:"access_cmd,omitempty"`
}

func (x *NetworkPlan_Endpoint) Reset() {
	*x = NetworkPlan_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPlan_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPlan_Endpoint) ProtoMessage() {}

func (x *NetworkPlan_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPlan_Endpoint.ProtoReflect.Descriptor instead.
func (*NetworkPlan_Endpoint) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NetworkPlan_Endpoint) GetLabel() *NetworkPlan_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *NetworkPlan_Endpoint) GetFocus() bool {
	if x != nil {
		return x.Focus
	}
	return false
}

func (x *NetworkPlan_Endpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NetworkPlan_Endpoint) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *NetworkPlan_Endpoint) GetEndpointOwner() string {
	if x != nil {
		return x.EndpointOwner
	}
	return ""
}

func (x *NetworkPlan_Endpoint) GetAccessCmd() []*NetworkPlan_AccessCmd {
	if x != nil {
		return x.AccessCmd
	}
	return nil
}

type NetworkPlan_Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn         string   `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Schema       string   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	PortLabel    string   `protobuf:"bytes,3,opt,name=port_label,json=portLabel,proto3" json:"port_label,omitempty"`
	Command      string   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Comment      string   `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	LocalPort    uint32   `protobuf:"varint,6,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	PackageOwner []string `protobuf:"bytes,7,rep,name=package_owner,json=packageOwner,proto3" json:"package_owner,omitempty"`
}

func (x *NetworkPlan_Ingress) Reset() {
	*x = NetworkPlan_Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPlan_Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPlan_Ingress) ProtoMessage() {}

func (x *NetworkPlan_Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPlan_Ingress.ProtoReflect.Descriptor instead.
func (*NetworkPlan_Ingress) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{0, 2}
}

func (x *NetworkPlan_Ingress) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *NetworkPlan_Ingress) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *NetworkPlan_Ingress) GetPortLabel() string {
	if x != nil {
		return x.PortLabel
	}
	return ""
}

func (x *NetworkPlan_Ingress) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *NetworkPlan_Ingress) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NetworkPlan_Ingress) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *NetworkPlan_Ingress) GetPackageOwner() []string {
	if x != nil {
		return x.PackageOwner
	}
	return nil
}

type NetworkPlan_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	ServiceProto string `protobuf:"bytes,2,opt,name=service_proto,json=serviceProto,proto3" json:"service_proto,omitempty"`
}

func (x *NetworkPlan_Label) Reset() {
	*x = NetworkPlan_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPlan_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPlan_Label) ProtoMessage() {}

func (x *NetworkPlan_Label) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPlan_Label.ProtoReflect.Descriptor instead.
func (*NetworkPlan_Label) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{0, 3}
}

func (x *NetworkPlan_Label) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NetworkPlan_Label) GetServiceProto() string {
	if x != nil {
		return x.ServiceProto
	}
	return ""
}

type Endpoint_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerPort int32  `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
}

func (x *Endpoint_Port) Reset() {
	*x = Endpoint_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint_Port) ProtoMessage() {}

func (x *Endpoint_Port) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint_Port.ProtoReflect.Descriptor instead.
func (*Endpoint_Port) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Endpoint_Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint_Port) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

type Endpoint_ServiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *Endpoint_ServiceMetadata) Reset() {
	*x = Endpoint_ServiceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_storage_deploy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint_ServiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint_ServiceMetadata) ProtoMessage() {}

func (x *Endpoint_ServiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_schema_storage_deploy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint_ServiceMetadata.ProtoReflect.Descriptor instead.
func (*Endpoint_ServiceMetadata) Descriptor() ([]byte, []int) {
	return file_schema_storage_deploy_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Endpoint_ServiceMetadata) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Endpoint_ServiceMetadata) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

var File_schema_storage_deploy_proto protoreflect.FileDescriptor

var file_schema_storage_deploy_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x93, 0x09, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c,
	0x61, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x6e, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x15, 0x6e, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x6e, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x1a, 0x93, 0x02, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6d, 0x64, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6d, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a,
	0xcc, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x71, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x42,
	0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xf1,
	0x05, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x09, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x41, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x41, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22,
	0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x22, 0xec, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x74, 0x74,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x12,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x0b,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x54, 0x4c, 0x53,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x04, 0x42, 0x2d, 0x5a, 0x2b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x2f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_schema_storage_deploy_proto_rawDescOnce sync.Once
	file_schema_storage_deploy_proto_rawDescData = file_schema_storage_deploy_proto_rawDesc
)

func file_schema_storage_deploy_proto_rawDescGZIP() []byte {
	file_schema_storage_deploy_proto_rawDescOnce.Do(func() {
		file_schema_storage_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_storage_deploy_proto_rawDescData)
	})
	return file_schema_storage_deploy_proto_rawDescData
}

var file_schema_storage_deploy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_schema_storage_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_schema_storage_deploy_proto_goTypes = []interface{}{
	(Endpoint_Type)(0),               // 0: foundation.schema.storage.Endpoint.Type
	(Domain_ManagedType)(0),          // 1: foundation.schema.storage.Domain.ManagedType
	(*NetworkPlan)(nil),              // 2: foundation.schema.storage.NetworkPlan
	(*Endpoint)(nil),                 // 3: foundation.schema.storage.Endpoint
	(*IngressFragment)(nil),          // 4: foundation.schema.storage.IngressFragment
	(*IngressHttpPath)(nil),          // 5: foundation.schema.storage.IngressHttpPath
	(*IngressGrpcService)(nil),       // 6: foundation.schema.storage.IngressGrpcService
	(*Domain)(nil),                   // 7: foundation.schema.storage.Domain
	(*NetworkPlan_AccessCmd)(nil),    // 8: foundation.schema.storage.NetworkPlan.AccessCmd
	(*NetworkPlan_Endpoint)(nil),     // 9: foundation.schema.storage.NetworkPlan.Endpoint
	(*NetworkPlan_Ingress)(nil),      // 10: foundation.schema.storage.NetworkPlan.Ingress
	(*NetworkPlan_Label)(nil),        // 11: foundation.schema.storage.NetworkPlan.Label
	(*Endpoint_Port)(nil),            // 12: foundation.schema.storage.Endpoint.Port
	(*Endpoint_ServiceMetadata)(nil), // 13: foundation.schema.storage.Endpoint.ServiceMetadata
}
var file_schema_storage_deploy_proto_depIdxs = []int32{
	9,  // 0: foundation.schema.storage.NetworkPlan.endpoint:type_name -> foundation.schema.storage.NetworkPlan.Endpoint
	10, // 1: foundation.schema.storage.NetworkPlan.non_local_managed:type_name -> foundation.schema.storage.NetworkPlan.Ingress
	10, // 2: foundation.schema.storage.NetworkPlan.non_local_non_managed:type_name -> foundation.schema.storage.NetworkPlan.Ingress
	4,  // 3: foundation.schema.storage.NetworkPlan.ingress_fragments:type_name -> foundation.schema.storage.IngressFragment
	3,  // 4: foundation.schema.storage.NetworkPlan.endpoints:type_name -> foundation.schema.storage.Endpoint
	0,  // 5: foundation.schema.storage.Endpoint.type:type_name -> foundation.schema.storage.Endpoint.Type
	12, // 6: foundation.schema.storage.Endpoint.port:type_name -> foundation.schema.storage.Endpoint.Port
	13, // 7: foundation.schema.storage.Endpoint.service_metadata:type_name -> foundation.schema.storage.Endpoint.ServiceMetadata
	5,  // 8: foundation.schema.storage.Endpoint.http_path:type_name -> foundation.schema.storage.IngressHttpPath
	7,  // 9: foundation.schema.storage.IngressFragment.domain:type_name -> foundation.schema.storage.Domain
	3,  // 10: foundation.schema.storage.IngressFragment.endpoint:type_name -> foundation.schema.storage.Endpoint
	5,  // 11: foundation.schema.storage.IngressFragment.http_path:type_name -> foundation.schema.storage.IngressHttpPath
	6,  // 12: foundation.schema.storage.IngressFragment.grpc_service:type_name -> foundation.schema.storage.IngressGrpcService
	12, // 13: foundation.schema.storage.IngressHttpPath.port:type_name -> foundation.schema.storage.Endpoint.Port
	12, // 14: foundation.schema.storage.IngressGrpcService.port:type_name -> foundation.schema.storage.Endpoint.Port
	1,  // 15: foundation.schema.storage.Domain.managed:type_name -> foundation.schema.storage.Domain.ManagedType
	11, // 16: foundation.schema.storage.NetworkPlan.Endpoint.label:type_name -> foundation.schema.storage.NetworkPlan.Label
	8,  // 17: foundation.schema.storage.NetworkPlan.Endpoint.access_cmd:type_name -> foundation.schema.storage.NetworkPlan.AccessCmd
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_schema_storage_deploy_proto_init() }
func file_schema_storage_deploy_proto_init() {
	if File_schema_storage_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schema_storage_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressHttpPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressGrpcService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPlan_AccessCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPlan_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPlan_Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPlan_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_storage_deploy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint_ServiceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_storage_deploy_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_storage_deploy_proto_goTypes,
		DependencyIndexes: file_schema_storage_deploy_proto_depIdxs,
		EnumInfos:         file_schema_storage_deploy_proto_enumTypes,
		MessageInfos:      file_schema_storage_deploy_proto_msgTypes,
	}.Build()
	File_schema_storage_deploy_proto = out.File
	file_schema_storage_deploy_proto_rawDesc = nil
	file_schema_storage_deploy_proto_goTypes = nil
	file_schema_storage_deploy_proto_depIdxs = nil
}
