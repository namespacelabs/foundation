// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package foundation.runtime.kubernetes.kubedef;

option go_package = "namespacelabs.dev/foundation/framework/kubernetes/kubedef";

import "schema/runtime/types.proto";
import "schema/runtime/config.proto";
import "schema/runtime/deployable.proto";
import "schema/package.proto";
import "std/resources/op.proto";
import "std/types/certificates.proto";

message OpApply {
    reserved 6;

    // The serialized resource that is being applied.
    string body_json = 4;
    // If true, sets the namespace of the resource to that of the deployment's scope.
    // The namespace must not be set in the serialized resource above.
    bool set_namespace = 8;
    // If true, creates resources without emitting user-visible events.
    bool inhibit_events = 9;
    // If this apply is done in the scope of a planned deployment, deployable will be set.
    foundation.schema.runtime.Deployable deployable = 10;
    // If set, specifies which package yielded this apply. Used for presentation purposes.
    foundation.schema.PackageRef creator = 11;

    CheckGenerationCondition check_generation_condition = 7;

    message CheckGenerationCondition {
        string type = 1;
    }

    reserved 1, 2, 3, 5;
}

message OpEnsureDeployment {
    foundation.schema.runtime.Deployable deployable                          = 1;
    string                               serialized_resource                 = 2;
    bool                                 set_namespace                       = 3;
    bool                                 inhibit_events                      = 4;
    string                               configuration_volume_name           = 5;
    repeated foundation.schema.runtime.SetContainerField set_container_field = 6;
}

message OpEnsureRuntimeConfig {
    foundation.schema.runtime.Deployable    deployable                = 1;
    foundation.schema.runtime.RuntimeConfig runtime_config            = 2;
    repeated string                         resource_instance_id      = 3;  // XXX deprecated, use dependency.
    repeated std.resources.ResourceDependency dependency              = 4;
    bool                                      persist_configuration   = 5;
    repeated InjectedResource                 inject_resource         = 6;
    foundation.schema.runtime.BuildVCS        build_vcs               = 7;
    repeated foundation.schema.runtime.SecretChecksum secret_checksum = 8;

    message InjectedResource {
        foundation.schema.PackageRef resource_ref    = 1;
        bytes                        serialized_json = 2;
    }
}

message EnsureRuntimeConfigOutput {
    string config_id                = 1;
    string serialized_runtime_json  = 2;
    string serialized_resource_json = 3;
}

message OpDelete {
    reserved 4;

    string resource      = 1;
    string namespace     = 2;
    bool   set_namespace = 5;
    string name          = 3;
}

message OpDeleteList {
    reserved 4;

    string resource       = 1;
    string namespace      = 2;
    bool   set_namespace  = 5;
    string label_selector = 3;
}

message OpCreate {
    reserved 7;
    string resource               = 1;  // XXX deprecated.
    bool   set_namespace          = 8;
    bool   skip_if_already_exists = 2;
    bool   update_if_existing     = 6;
    string body_json              = 5;

    reserved 3, 4;
}

// This is a temporary type; usage should be limited. It's a workaround until we
// can compose invocations, so secrets can wrap a "create secret payload"
// invocation around the user-provided invocation. The value is passed
// along-side the SerializedInvocation, with key "value".
message OpCreateSecretConditionally {
    reserved 5;
    string namespace                                                = 1;
    bool                                    set_namespace           = 6;
    string                                  name                    = 2;
    string                                  user_specified_name     = 3;
    foundation.std.types.TLSCertificateSpec self_signed_certificate = 4;
}

message OpCleanupRuntimeConfig {
    string namespace = 1;
    bool check_pods  = 2;  // Set in tests.
}

message OpApplyRoleBinding {
    bool              namespaced        = 1;
    string            role_name         = 2;
    string            role_binding_name = 3;
    repeated KeyValue label             = 4;
    repeated KeyValue annotation        = 5;
    string            rules_json        = 6;
    string            service_account   = 7;

    message KeyValue {
        string key   = 1;
        string value = 2;
    }
}
