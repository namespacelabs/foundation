// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package foundation.runtime.kubernetes.kubedef;

option go_package = "namespacelabs.dev/foundation/framework/kubernetes/kubedef";

import "schema/binary.proto";
import "schema/package.proto";
import "schema/probe.proto";

message SpecExtension {
    // XXX ideally we'd use Kubernetes protos here.
    string              service_account = 3;
    repeated Volume     volume          = 1;
    repeated Annotation annotation      = 2;
    // If true, creates a service account. If `service_account` is specified, use that name, else generate one from the server's name.
    bool                ensure_service_account     = 4;
    repeated Annotation service_account_annotation = 5;
    SecurityContext     security_context           = 6;

    message Volume {
        string name = 1;

        oneof volume_type {
            Secret    secret     = 2;
            ConfigMap config_map = 3;
        }

        message Secret {
            string secret_name = 1;
        }

        message ConfigMap {
            string        name            = 1;
            string        config_map_name = 2;
            repeated Item item            = 3;

            message Item {
                string key  = 1;
                string path = 2;
            }
        }
    }

    message Annotation {
        string key   = 1;
        string value = 2;
    }

    message SecurityContext {
        int64 run_as_user  = 1;
        int64 run_as_group = 2;
        int64 fs_group     = 3;
    }
}

// Next ID: 8
message ContainerExtension {
    repeated VolumeMount volume_mount          = 1;
    repeated schema.BinaryConfig.EnvEntry env  = 2;
    repeated string                       args = 5;

    // Deprecated, use `args`.
    repeated ArgTuple arg_tuple = 4;
    // Deprecated, use `InitContainerExtension`.
    repeated InitContainer init_container = 3;

    repeated foundation.schema.Probe probe = 7;

    message VolumeMount {
        string name          = 1;
        bool   read_only     = 2;
        string mount_path    = 3;
        bool   mount_on_init = 4;  // Whether to mount this volume also for init containers.
    }

    message Env {
        string name  = 1;
        string value = 2;
    }

    message ArgTuple {
        string name  = 1;
        string value = 2;
    }

    message InitContainer {
        string          package_name = 1;
        repeated string arg          = 2;
    }

    reserved 6;
}

message InitContainerExtension {
    // Deprecated, use package_ref.
    string package_name = 1;

    schema.PackageRef package_ref = 3;

    repeated string args = 2;
}
