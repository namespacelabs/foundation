// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: std/testdata/service/localstacks3/service.proto

package localstacks3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3DemoServiceClient is the client API for S3DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3DemoServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type s3DemoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3DemoServiceClient(cc grpc.ClientConnInterface) S3DemoServiceClient {
	return &s3DemoServiceClient{cc}
}

func (c *s3DemoServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/localstacks3.S3DemoService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3DemoServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/localstacks3.S3DemoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3DemoServiceServer is the server API for S3DemoService service.
// All implementations should embed UnimplementedS3DemoServiceServer
// for forward compatibility
type S3DemoServiceServer interface {
	Add(context.Context, *AddRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedS3DemoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedS3DemoServiceServer struct {
}

func (UnimplementedS3DemoServiceServer) Add(context.Context, *AddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedS3DemoServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeS3DemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3DemoServiceServer will
// result in compilation errors.
type UnsafeS3DemoServiceServer interface {
	mustEmbedUnimplementedS3DemoServiceServer()
}

func RegisterS3DemoServiceServer(s grpc.ServiceRegistrar, srv S3DemoServiceServer) {
	s.RegisterService(&S3DemoService_ServiceDesc, srv)
}

func _S3DemoService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3DemoServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localstacks3.S3DemoService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3DemoServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3DemoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3DemoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localstacks3.S3DemoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3DemoServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// S3DemoService_ServiceDesc is the grpc.ServiceDesc for S3DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localstacks3.S3DemoService",
	HandlerType: (*S3DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _S3DemoService_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _S3DemoService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "std/testdata/service/localstacks3/service.proto",
}
