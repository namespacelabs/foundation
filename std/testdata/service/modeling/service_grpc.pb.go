// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: std/testdata/service/modeling/service.proto

package modeling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelingServiceClient is the client API for ModelingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelingServiceClient interface {
	GetScopedData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScopedDataResponse, error)
}

type modelingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelingServiceClient(cc grpc.ClientConnInterface) ModelingServiceClient {
	return &modelingServiceClient{cc}
}

func (c *modelingServiceClient) GetScopedData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScopedDataResponse, error) {
	out := new(GetScopedDataResponse)
	err := c.cc.Invoke(ctx, "/std.testdata.service.modeling.ModelingService/GetScopedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelingServiceServer is the server API for ModelingService service.
// All implementations should embed UnimplementedModelingServiceServer
// for forward compatibility
type ModelingServiceServer interface {
	GetScopedData(context.Context, *emptypb.Empty) (*GetScopedDataResponse, error)
}

// UnimplementedModelingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelingServiceServer struct {
}

func (UnimplementedModelingServiceServer) GetScopedData(context.Context, *emptypb.Empty) (*GetScopedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopedData not implemented")
}

// UnsafeModelingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelingServiceServer will
// result in compilation errors.
type UnsafeModelingServiceServer interface {
	mustEmbedUnimplementedModelingServiceServer()
}

func RegisterModelingServiceServer(s grpc.ServiceRegistrar, srv ModelingServiceServer) {
	s.RegisterService(&ModelingService_ServiceDesc, srv)
}

func _ModelingService_GetScopedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelingServiceServer).GetScopedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/std.testdata.service.modeling.ModelingService/GetScopedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelingServiceServer).GetScopedData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelingService_ServiceDesc is the grpc.ServiceDesc for ModelingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "std.testdata.service.modeling.ModelingService",
	HandlerType: (*ModelingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScopedData",
			Handler:    _ModelingService_GetScopedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "std/testdata/service/modeling/service.proto",
}
