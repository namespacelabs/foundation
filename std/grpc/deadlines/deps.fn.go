// This file was automatically generated by Foundation.
// DO NOT EDIT. To update, re-run `fn generate`.

package deadlines

import (
	"context"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/go/grpc/interceptors"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	Interceptors interceptors.Registration
}

type _checkProvideDeadlines func(context.Context, *Deadline, ExtensionDeps) (*DeadlineRegistration, error)

var _ _checkProvideDeadlines = ProvideDeadlines

var (
	Package__vbko45 = &core.Package{
		PackageName: "namespacelabs.dev/foundation/std/grpc/deadlines",
	}

	Provider__vbko45 = core.Provider{
		Package:     Package__vbko45,
		Instantiate: makeDeps__vbko45,
	}

	Initializers__vbko45 = []*core.Initializer{
		{
			Package: Package__vbko45,
			Do: func(ctx context.Context, di core.Dependencies) error {
				return di.Instantiate(ctx, Provider__vbko45, func(ctx context.Context, v interface{}) error {
					return Prepare(ctx, v.(ExtensionDeps))
				})
			},
		},
	}
)

func makeDeps__vbko45(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	if deps.Interceptors, err = interceptors.ProvideInterceptorRegistration(ctx, nil); err != nil {
		return nil, err
	}

	return deps, nil
}
