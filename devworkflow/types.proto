// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the EARLY ACCESS SOFTWARE LICENSE AGREEMENT
// available at http://github.com/namespacelabs/foundation

syntax = "proto3";

package foundation.devworkflow;

option go_package = "namespacelabs.dev/foundation/devworkflow";

import "schema/schema.proto";
import "schema/networking.proto";
import "schema/storage/deploy.proto";
import "schema/workspace.proto";
import "workspace/tasks/protocol/tasks.proto";

// Next ID: 13
message Stack {
    uint64             revision                = 9;
    string             abs_root                = 1;
    schema.Workspace   workspace               = 2;
    schema.Environment env                     = 3;
    repeated schema.Environment available_env  = 8;
    schema.Stack                stack          = 4;
    schema.Stack.Entry          current        = 5;
    repeated string             focus          = 11;
    repeated StackEntryState    state          = 6;
    repeated ForwardedPort      forwarded_port = 7;
    // Pre-rendered "network_plan" as text. Contains ANSI color codes.
    // TODO: remove and use native Web rendering.
    string                     rendered_port_forwarding = 10;
    schema.storage.NetworkPlan network_plan             = 12;
}

message ForwardedPort {
    schema.Endpoint endpoint       = 1;
    int32           local_port     = 2;
    int32           container_port = 3;
    string          error          = 4;
}

message Update {
    Stack    stack_update                                         = 1;
    repeated foundation.workspace.tasks.protocol.Task task_update = 2;
}

message StackEntryState {
    string package_name = 1;
    string last_error   = 2;
}

message DevWorkflowRequest {
    oneof type {
        SetWorkspace set_workspace    = 1;
        bool         reload_workspace = 2;
    }

    message SetWorkspace {
        string abs_root     = 1;
        string package_name = 2;
        string env_name     = 3;

        // XXX this needs more appropriate modeling.
        repeated string additional_servers = 4;
    }
}

message TerminalInput {
    bytes        stdin  = 1;
    WindowResize resize = 2;

    message WindowResize {
        uint32 width  = 1;
        uint32 height = 2;
    }
}