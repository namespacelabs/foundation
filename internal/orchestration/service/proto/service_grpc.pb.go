// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: internal/orchestration/service/proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestrationServiceClient is the client API for OrchestrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestrationServiceClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error)
}

type orchestrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestrationServiceClient(cc grpc.ClientConnInterface) OrchestrationServiceClient {
	return &orchestrationServiceClient{cc}
}

func (c *orchestrationServiceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/nsl.orchestration.service.proto.OrchestrationService/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestrationServiceClient) DeploymentStatus(ctx context.Context, in *DeploymentStatusRequest, opts ...grpc.CallOption) (*DeploymentStatusResponse, error) {
	out := new(DeploymentStatusResponse)
	err := c.cc.Invoke(ctx, "/nsl.orchestration.service.proto.OrchestrationService/DeploymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestrationServiceServer is the server API for OrchestrationService service.
// All implementations should embed UnimplementedOrchestrationServiceServer
// for forward compatibility
type OrchestrationServiceServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	DeploymentStatus(context.Context, *DeploymentStatusRequest) (*DeploymentStatusResponse, error)
}

// UnimplementedOrchestrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrchestrationServiceServer struct {
}

func (UnimplementedOrchestrationServiceServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedOrchestrationServiceServer) DeploymentStatus(context.Context, *DeploymentStatusRequest) (*DeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploymentStatus not implemented")
}

// UnsafeOrchestrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestrationServiceServer will
// result in compilation errors.
type UnsafeOrchestrationServiceServer interface {
	mustEmbedUnimplementedOrchestrationServiceServer()
}

func RegisterOrchestrationServiceServer(s grpc.ServiceRegistrar, srv OrchestrationServiceServer) {
	s.RegisterService(&OrchestrationService_ServiceDesc, srv)
}

func _OrchestrationService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsl.orchestration.service.proto.OrchestrationService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestrationService_DeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestrationServiceServer).DeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nsl.orchestration.service.proto.OrchestrationService/DeploymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestrationServiceServer).DeploymentStatus(ctx, req.(*DeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestrationService_ServiceDesc is the grpc.ServiceDesc for OrchestrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nsl.orchestration.service.proto.OrchestrationService",
	HandlerType: (*OrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _OrchestrationService_Deploy_Handler,
		},
		{
			MethodName: "DeploymentStatus",
			Handler:    _OrchestrationService_DeploymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/orchestration/service/proto/service.proto",
}
