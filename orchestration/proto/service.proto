// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package nsl.orchestration;

option go_package = "namespacelabs.dev/foundation/orchestration/proto";

import "universe/aws/configuration/aws.proto";
import "schema/orchestration/event.proto";
import "schema/runtime/deployable.proto";
import "schema/serialized.proto";
import "std/tasks/protolog/log.proto";
import "internal/runtime/kubernetes/client/clientconfig.proto";

message DeployRequest {
    foundation.schema.DeployPlan                        plan            = 1;
    foundation.universe.aws.configuration.Configuration aws             = 4;
    InternalUserAuth                                    auth            = 5;  // Time-limited Namespace session.
    bytes                                               serialized_auth = 6;

    foundation.runtime.kubernetes.HostEnv host_env = 7;
    reserved 2, 3;
}

message InternalUserAuth {
    string username = 1;
    string org      = 2;
    bytes  opaque   = 3;
}

message DeployResponse {
    string id = 1;  // Deployment to follow
}

message DeploymentStatusRequest {
    string id        = 1;  // Deployment to follow
    int32  log_level = 2;
}

message DeploymentStatusResponse {
    foundation.schema.orchestration.Event   event = 2;
    foundation.workspace.tasks.protolog.Log log   = 4;

    reserved 1, 3;
}

message GetOrchestratorVersionRequest {
    bool skip_cache = 1;
}

message GetOrchestratorVersionResponse {
    int32 current = 6;
    int32 latest  = 7;

    reserved 1 to 4;
}

message AreServicesReadyRequest {
    foundation.schema.runtime.Deployable deployable = 1;
    string namespace                                = 2;
}

message AreServicesReadyResponse {
    bool   ready   = 1;
    string message = 2;
}

service OrchestrationService {
    rpc Deploy(DeployRequest) returns (DeployResponse);
    rpc DeploymentStatus(DeploymentStatusRequest) returns (stream DeploymentStatusResponse);
    rpc GetOrchestratorVersion(GetOrchestratorVersionRequest) returns (GetOrchestratorVersionResponse);
    rpc AreServicesReady(AreServicesReadyRequest) returns (AreServicesReadyResponse);
}