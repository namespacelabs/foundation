// Copyright 2022 Namespace Labs Inc; All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.

syntax = "proto3";

package nsl.orchestration;

option go_package = "namespacelabs.dev/foundation/orchestration/proto";

import "universe/aws/configuration/aws.proto";
import "internal/fnapi/userauth.proto";
import "schema/orchestration/event.proto";
import "schema/serialized.proto";
import "schema/workspace.proto";
import "std/tasks/protolog/log.proto";

message DeployRequest {
    foundation.schema.DeployPlan                        plan = 1;
    foundation.universe.aws.configuration.Configuration aws  = 4;
    nsl.internal.fnapi.UserAuth                         auth = 5;  // Time-limited Namespace session.

    reserved 2, 3;
}

message DeployResponse {
    string id = 1;  // Deployment to follow
}

message DeploymentStatusRequest {
    string id        = 1;  // Deployment to follow
    int32  log_level = 2;
}

message DeploymentStatusResponse {
    foundation.schema.orchestration.Event   event = 2;
    foundation.workspace.tasks.protolog.Log log   = 4;

    reserved 1, 3;
}

message GetOrchestratorVersionRequest {
    bool skip_cache = 1;
}

message GetOrchestratorVersionResponse {
    foundation.schema.Workspace.BinaryDigest current         = 1;
    repeated foundation.schema.Workspace.BinaryDigest pinned = 2;
}

service OrchestrationService {
    rpc Deploy(DeployRequest) returns (DeployResponse);
    rpc DeploymentStatus(DeploymentStatusRequest) returns (stream DeploymentStatusResponse);
    rpc GetOrchestratorVersion(GetOrchestratorVersionRequest) returns (GetOrchestratorVersionResponse);
}