name: e2e
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

permissions:
  packages: read
  contents: read

jobs:
  build_fn:
    name: Build Foundation
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Setup cross-invocation caching (Go)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-fnbuild-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-fnbuild-
      - name: Build ns
        env:
          CGO_ENABLED: 0
        run: go build -v -o ns ./cmd/ns
      - name: Upload ns
        uses: actions/upload-artifact@v3
        with:
          name: ns-${{ runner.os }}
          path: ns
          # We don't need to persist it for long, only for the next job to download it.
          retention-days: 1
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "title": "${{ job.status }}: ${{ github.workflow }}",
                "title_link": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks",
                "text": "${{ github.repository }}@${{ github.ref }}: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                "fields": [{ "value": ${{ toJson(github.event.head_commit.message) }}, "short": false }],
                "footer": "${{ github.event.head_commit.committer.name }} at ${{ github.event.head_commit.timestamp }}",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure() && github.event_name == 'push'

  run_deploy:
    name: Test deployment to Kubernetes os=${{ matrix.os }} use_prebuilts=${{ matrix.use_prebuilts }}
    needs: build_fn
    strategy:
      matrix:
        os: [ubuntu-20.04]
        use_prebuilts: [false, true]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Required by buildkit gha cache.
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Setup cross-invocation caching (Go)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-fnrun-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-fnrun-

      - name: Download Foundation
        uses: actions/download-artifact@v3
        with:
          name: ns-${{ runner.os }}

      # ns is moved out of the workspace so we don't spend time uploading it to buildkit.
      - name: Make Foundation executable
        run: chmod +x ns && mv ns /tmp/ns

      - name: Prepare development environment
        run: /tmp/ns prepare local

      - name: Print kubectl cluster-info
        run: kubectl cluster-info

      # namespace-ci already deploys all servers with buildkit, so only testing golang_use_buildkit=false here.
      - name: Deploy internal/testdata/server/gogrpc
        run: |
          /tmp/ns deploy \
            --buildkit_import_cache=type=gha \
            --buildkit_export_cache=type=gha,mode=max \
            --use_prebuilts=${{ matrix.use_prebuilts }} \
            --golang_use_buildkit=false \
            --naming_no_tls=true \
            --use_orchestrator=false \
            internal/testdata/server/gogrpc

  run_e2e_tests:
    name: e2e tests
    needs: build_fn
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: Check out
        uses: actions/checkout@v3

      # Required by buildkit gha cache.
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Setup cross-invocation caching (Go)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-fnrun-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-fnrun-

      - name: Download Foundation
        uses: actions/download-artifact@v3
        with:
          name: ns-${{ runner.os }}

      # ns is moved out of the workspace so we don't spend time uploading it to buildkit.
      - name: Make Foundation executable
        run: chmod +x ns && mv ns /tmp/ns

      - name: Prepare development environment
        run: /tmp/ns prepare local

      - name: Print kubectl cluster-info
        run: kubectl cluster-info

      - name: Login
        run: echo ${{ secrets.GITHUB_TOKEN }} | /tmp/ns login robot github.com/namespacelabs/foundation

      - name: Run tests
        run: |
          /tmp/ns test \
            --buildkit_import_cache=type=gha \
            --buildkit_export_cache=type=gha,mode=max \
            --use_prebuilts=true \
            --golang_use_buildkit=false \
            --testing_use_namespace_cloud \
            --rocket_ship \
            --include_servers

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "title": "${{ job.status }}: ${{ github.workflow }}",
                "title_link": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks",
                "text": "${{ github.repository }}@${{ github.ref }}: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                "fields": [{ "value": ${{ toJson(github.event.head_commit.message) }}, "short": false }],
                "footer": "${{ github.event.head_commit.committer.name }} at ${{ github.event.head_commit.timestamp }}",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure() && github.event_name == 'push'

  run_cross_repo_tests:
    name: cross-repo e2e tests
    needs: build_fn
    strategy:
      matrix:
        os: [ubuntu-20.04]
        repo: [examples]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - name: checkout dependant repo
        uses: actions/checkout@v3
        with:
          repository: namespacelabs/${{ matrix.repo }}
          path: external-repo

      # Required by buildkit gha cache.
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Setup cross-invocation caching (Go)
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-fnrun-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-fnrun-

      - name: Download Foundation
        uses: actions/download-artifact@v3
        with:
          name: ns-${{ runner.os }}

      # ns is moved out of the workspace so we don't spend time uploading it to buildkit.
      - name: Make Foundation executable
        run: chmod +x ns && mv ns /tmp/ns

      - name: Prepare development environment
        run: cd external-repo && /tmp/ns prepare local

      - name: Print kubectl cluster-info
        run: kubectl cluster-info

      - name: Login
        run: echo ${{ secrets.GITHUB_TOKEN }} | /tmp/ns login robot github.com/namespacelabs/${{ matrix.repo }}

      - name: Run tests
        run: |
          cd external-repo; \
          /tmp/ns test \
            nextjs/01-simple/server \
            multitier/01-simple/frontend \
            multitier/01-simple/apibackend \
            multitier/02-withsecrets/apibackend \
            golang/01-simple/server \
            golang/02-withsecrets/server \
            --buildkit_import_cache=type=gha \
            --buildkit_export_cache=type=gha,mode=max \
            --use_prebuilts=true \
            --golang_use_buildkit=false \
            --testing_use_namespace_cloud \
            --rocket_ship \
            --include_servers

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "title": "${{ job.status }}: ${{ github.workflow }}",
                "title_link": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks",
                "text": "${{ github.repository }}@${{ github.ref }}: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                "fields": [{ "value": ${{ toJson(github.event.head_commit.message) }}, "short": false }],
                "footer": "${{ github.event.head_commit.committer.name }} at ${{ github.event.head_commit.timestamp }}",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure() && github.event_name == 'push'

  test_unprepare:
    name: Test unprepare os=${{ matrix.os }}
    needs: build_fn
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Download Foundation
        uses: actions/download-artifact@v3
        with:
          name: ns-${{ runner.os }}

      # ns is moved out of the workspace so we don't spend time uploading it to buildkit.
      - name: Make Foundation executable
        run: chmod +x ns && mv ns /tmp/ns

      - name: Prepare first environment
        run: /tmp/ns prepare local

      - name: Test first environment
        run: /tmp/ns doctor --tests=workspace,kubernetes-run

      - name: Unprepare
        run: /tmp/ns unprepare

      - name: Prepare second environment
        run: /tmp/ns prepare local

      - name: Test second environment
        run: /tmp/ns doctor --tests=workspace,kubernetes-run
